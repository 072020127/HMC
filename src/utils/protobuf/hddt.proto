syntax = "proto3";
package hddt;

// 主机信息收集协议
message RankInfo {
  int32 rank = 1;         // 当前节点的rank编号
  string hostname = 2;     // 主机名
  string ip_address = 3;   // IP地址
  int64 timestamp = 4;     // 上报时间戳
}

message RankInfoCollection {
  repeated RankInfo infos = 1;  // 所有rank的主机信息
}

// 任务定义协议
message CommunicationTask {
  int32 target_rank = 1;    // 通信目标rank
  int64 ptr_offset = 2;     // 内存指针偏移量
  int64 data_size = 4;      // 数据大小（字节）
}

// 当前仅支持规约计算（在通信buffer上的）
message ComputeTask {
  enum OperatorType {
    REDUCE = 0;
    COPY = 1;
    // 可扩展其他算子类型
  }
  OperatorType op_type = 1;
  int64 ptr_offset = 2;     // 内存指针偏移量
  int64 data_size = 3;      // 数据大小（字节）
  string dtype = 4;         // 数据类型，int/float32 etc.
}

message SynchronizationTask {
  repeated int32 wait_ranks = 1;   // 需要等待的rank列表
  int64 sequence_number = 2;       // 等待任务的等待序号（唯一标识符）
}

message Task {
  oneof task_type {
    CommunicationTask comm_task = 1;
    ComputeTask compute_task = 2;
    SynchronizationTask sync_task = 3;
  }
  int64 estimated_duration = 4;  // 预估执行时间（ms）
}

// 任务链定义
message TaskChain {
  repeated Task tasks = 1;         // 有序任务列表
  int32 chain_id = 2;             // 任务链唯一标识
  int64 priority = 3;             // 执行优先级
}

// 分布式任务分发协议
message ComputationGraph {
  message RankAssignment {
    int32 rank = 1;
    repeated TaskChain chains = 2;
    map<int32, int32> dependency_map = 3;  // 依赖的rank-chain映射
  }

  repeated RankAssignment assignments = 1;  // 全部分配信息
  int64 graph_version = 2;                 // 计算图版本号
  map<int32, string> rank_host_mapping = 3; // rank到host的映射关系
}
