// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hddt.proto

#include "hddt.pb.h"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_hddt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<0>
        scc_info_CommunicationTask_hddt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hddt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<2>
        scc_info_ComputationGraph_RankAssignment_hddt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hddt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<0>
        scc_info_ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse_hddt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hddt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<0>
        scc_info_ComputationGraph_RankHostMappingEntry_DoNotUse_hddt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hddt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<0>
        scc_info_ComputeTask_hddt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hddt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<0>
        scc_info_RankInfo_hddt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hddt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<0>
        scc_info_SynchronizationTask_hddt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hddt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<3>
        scc_info_Task_hddt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hddt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::
    SCCInfo<1>
        scc_info_TaskChain_hddt_2eproto;
namespace hddt {
class RankInfoDefaultTypeInternal {
public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankInfo> _instance;
} _RankInfo_default_instance_;
class RankInfoCollectionDefaultTypeInternal {
public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankInfoCollection>
      _instance;
} _RankInfoCollection_default_instance_;
class CommunicationTaskDefaultTypeInternal {
public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommunicationTask>
      _instance;
} _CommunicationTask_default_instance_;
class ComputeTaskDefaultTypeInternal {
public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ComputeTask>
      _instance;
} _ComputeTask_default_instance_;
class SynchronizationTaskDefaultTypeInternal {
public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SynchronizationTask>
      _instance;
} _SynchronizationTask_default_instance_;
class TaskDefaultTypeInternal {
public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Task> _instance;
  const ::hddt::CommunicationTask *comm_task_;
  const ::hddt::ComputeTask *compute_task_;
  const ::hddt::SynchronizationTask *sync_task_;
} _Task_default_instance_;
class TaskChainDefaultTypeInternal {
public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskChain> _instance;
} _TaskChain_default_instance_;
class
    ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUseDefaultTypeInternal {
public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse>
      _instance;
} _ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse_default_instance_;
class ComputationGraph_RankAssignmentDefaultTypeInternal {
public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      ComputationGraph_RankAssignment>
      _instance;
} _ComputationGraph_RankAssignment_default_instance_;
class ComputationGraph_RankHostMappingEntry_DoNotUseDefaultTypeInternal {
public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<
      ComputationGraph_RankHostMappingEntry_DoNotUse>
      _instance;
} _ComputationGraph_RankHostMappingEntry_DoNotUse_default_instance_;
class ComputationGraphDefaultTypeInternal {
public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ComputationGraph>
      _instance;
} _ComputationGraph_default_instance_;
} // namespace hddt
static void InitDefaultsscc_info_CommunicationTask_hddt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::hddt::_CommunicationTask_default_instance_;
    new (ptr)::hddt::CommunicationTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hddt::CommunicationTask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_CommunicationTask_hddt_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0, InitDefaultsscc_info_CommunicationTask_hddt_2eproto},
        {}};

static void InitDefaultsscc_info_ComputationGraph_hddt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::hddt::_ComputationGraph_default_instance_;
    new (ptr)::hddt::ComputationGraph();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hddt::ComputationGraph::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2>
    scc_info_ComputationGraph_hddt_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         2, 0, InitDefaultsscc_info_ComputationGraph_hddt_2eproto},
        {
            &scc_info_ComputationGraph_RankAssignment_hddt_2eproto.base,
            &scc_info_ComputationGraph_RankHostMappingEntry_DoNotUse_hddt_2eproto
                 .base,
        }};

static void
InitDefaultsscc_info_ComputationGraph_RankAssignment_hddt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::hddt::_ComputationGraph_RankAssignment_default_instance_;
    new (ptr)::hddt::ComputationGraph_RankAssignment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hddt::ComputationGraph_RankAssignment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2>
    scc_info_ComputationGraph_RankAssignment_hddt_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         2, 0,
         InitDefaultsscc_info_ComputationGraph_RankAssignment_hddt_2eproto},
        {
            &scc_info_TaskChain_hddt_2eproto.base,
            &scc_info_ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse_hddt_2eproto
                 .base,
        }};

static void
InitDefaultsscc_info_ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse_hddt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr =
        &::hddt::
            _ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse_default_instance_;
    new (ptr)::hddt::
        ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse();
  }
  ::hddt::ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse::
      InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse_hddt_2eproto =
        {{ATOMIC_VAR_INIT(
              ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
          0, 0,
          InitDefaultsscc_info_ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse_hddt_2eproto},
         {}};

static void
InitDefaultsscc_info_ComputationGraph_RankHostMappingEntry_DoNotUse_hddt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr =
        &::hddt::
            _ComputationGraph_RankHostMappingEntry_DoNotUse_default_instance_;
    new (ptr)::hddt::ComputationGraph_RankHostMappingEntry_DoNotUse();
  }
  ::hddt::ComputationGraph_RankHostMappingEntry_DoNotUse::
      InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_ComputationGraph_RankHostMappingEntry_DoNotUse_hddt_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0,
         InitDefaultsscc_info_ComputationGraph_RankHostMappingEntry_DoNotUse_hddt_2eproto},
        {}};

static void InitDefaultsscc_info_ComputeTask_hddt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::hddt::_ComputeTask_default_instance_;
    new (ptr)::hddt::ComputeTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hddt::ComputeTask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_ComputeTask_hddt_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0, InitDefaultsscc_info_ComputeTask_hddt_2eproto},
        {}};

static void InitDefaultsscc_info_RankInfo_hddt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::hddt::_RankInfo_default_instance_;
    new (ptr)::hddt::RankInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hddt::RankInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RankInfo_hddt_2eproto = {
    {ATOMIC_VAR_INIT(
         ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
     0, 0, InitDefaultsscc_info_RankInfo_hddt_2eproto},
    {}};

static void InitDefaultsscc_info_RankInfoCollection_hddt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::hddt::_RankInfoCollection_default_instance_;
    new (ptr)::hddt::RankInfoCollection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hddt::RankInfoCollection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_RankInfoCollection_hddt_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1, 0, InitDefaultsscc_info_RankInfoCollection_hddt_2eproto},
        {
            &scc_info_RankInfo_hddt_2eproto.base,
        }};

static void InitDefaultsscc_info_SynchronizationTask_hddt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::hddt::_SynchronizationTask_default_instance_;
    new (ptr)::hddt::SynchronizationTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hddt::SynchronizationTask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_SynchronizationTask_hddt_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0, 0, InitDefaultsscc_info_SynchronizationTask_hddt_2eproto},
        {}};

static void InitDefaultsscc_info_Task_hddt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::hddt::_Task_default_instance_;
    new (ptr)::hddt::Task();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hddt::Task::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Task_hddt_2eproto = {
    {ATOMIC_VAR_INIT(
         ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
     3, 0, InitDefaultsscc_info_Task_hddt_2eproto},
    {
        &scc_info_CommunicationTask_hddt_2eproto.base,
        &scc_info_ComputeTask_hddt_2eproto.base,
        &scc_info_SynchronizationTask_hddt_2eproto.base,
    }};

static void InitDefaultsscc_info_TaskChain_hddt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::hddt::_TaskChain_default_instance_;
    new (ptr)::hddt::TaskChain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hddt::TaskChain::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaskChain_hddt_2eproto =
    {{ATOMIC_VAR_INIT(
          ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
      1, 0, InitDefaultsscc_info_TaskChain_hddt_2eproto},
     {
         &scc_info_Task_hddt_2eproto.base,
     }};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hddt_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor
    *file_level_enum_descriptors_hddt_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const *
    *file_level_service_descriptors_hddt_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32
    TableStruct_hddt_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::hddt::RankInfo, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::hddt::RankInfo, rank_),
        PROTOBUF_FIELD_OFFSET(::hddt::RankInfo, hostname_),
        PROTOBUF_FIELD_OFFSET(::hddt::RankInfo, ip_address_),
        PROTOBUF_FIELD_OFFSET(::hddt::RankInfo, timestamp_),
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::hddt::RankInfoCollection, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::hddt::RankInfoCollection, infos_),
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::hddt::CommunicationTask, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::hddt::CommunicationTask, target_rank_),
        PROTOBUF_FIELD_OFFSET(::hddt::CommunicationTask, ptr_offset_),
        PROTOBUF_FIELD_OFFSET(::hddt::CommunicationTask, data_size_),
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::hddt::ComputeTask, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::hddt::ComputeTask, op_type_),
        PROTOBUF_FIELD_OFFSET(::hddt::ComputeTask, ptr_offset_),
        PROTOBUF_FIELD_OFFSET(::hddt::ComputeTask, data_size_),
        PROTOBUF_FIELD_OFFSET(::hddt::ComputeTask, dtype_),
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::hddt::SynchronizationTask, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::hddt::SynchronizationTask, wait_ranks_),
        PROTOBUF_FIELD_OFFSET(::hddt::SynchronizationTask, sequence_number_),
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::hddt::Task, _internal_metadata_),
        ~0u, // no _extensions_
        PROTOBUF_FIELD_OFFSET(::hddt::Task, _oneof_case_[0]),
        ~0u, // no _weak_field_map_
        offsetof(::hddt::TaskDefaultTypeInternal, comm_task_),
        offsetof(::hddt::TaskDefaultTypeInternal, compute_task_),
        offsetof(::hddt::TaskDefaultTypeInternal, sync_task_),
        PROTOBUF_FIELD_OFFSET(::hddt::Task, estimated_duration_),
        PROTOBUF_FIELD_OFFSET(::hddt::Task, task_type_),
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::hddt::TaskChain, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::hddt::TaskChain, tasks_),
        PROTOBUF_FIELD_OFFSET(::hddt::TaskChain, chain_id_),
        PROTOBUF_FIELD_OFFSET(::hddt::TaskChain, priority_),
        PROTOBUF_FIELD_OFFSET(
            ::hddt::ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse,
            _has_bits_),
        PROTOBUF_FIELD_OFFSET(
            ::hddt::ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse,
            _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(
            ::hddt::ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse,
            key_),
        PROTOBUF_FIELD_OFFSET(
            ::hddt::ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse,
            value_),
        0,
        1,
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::hddt::ComputationGraph_RankAssignment,
                              _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::hddt::ComputationGraph_RankAssignment, rank_),
        PROTOBUF_FIELD_OFFSET(::hddt::ComputationGraph_RankAssignment, chains_),
        PROTOBUF_FIELD_OFFSET(::hddt::ComputationGraph_RankAssignment,
                              dependency_map_),
        PROTOBUF_FIELD_OFFSET(
            ::hddt::ComputationGraph_RankHostMappingEntry_DoNotUse, _has_bits_),
        PROTOBUF_FIELD_OFFSET(
            ::hddt::ComputationGraph_RankHostMappingEntry_DoNotUse,
            _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(
            ::hddt::ComputationGraph_RankHostMappingEntry_DoNotUse, key_),
        PROTOBUF_FIELD_OFFSET(
            ::hddt::ComputationGraph_RankHostMappingEntry_DoNotUse, value_),
        0,
        1,
        ~0u, // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::hddt::ComputationGraph, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::hddt::ComputationGraph, assignments_),
        PROTOBUF_FIELD_OFFSET(::hddt::ComputationGraph, graph_version_),
        PROTOBUF_FIELD_OFFSET(::hddt::ComputationGraph, rank_host_mapping_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, sizeof(::hddt::RankInfo)},
        {9, -1, sizeof(::hddt::RankInfoCollection)},
        {15, -1, sizeof(::hddt::CommunicationTask)},
        {23, -1, sizeof(::hddt::ComputeTask)},
        {32, -1, sizeof(::hddt::SynchronizationTask)},
        {39, -1, sizeof(::hddt::Task)},
        {49, -1, sizeof(::hddt::TaskChain)},
        {57, 64,
         sizeof(
             ::hddt::
                 ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse)},
        {66, -1, sizeof(::hddt::ComputationGraph_RankAssignment)},
        {74, 81,
         sizeof(::hddt::ComputationGraph_RankHostMappingEntry_DoNotUse)},
        {83, -1, sizeof(::hddt::ComputationGraph)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const *const file_default_instances[] = {
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(
        &::hddt::_RankInfo_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(
        &::hddt::_RankInfoCollection_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(
        &::hddt::_CommunicationTask_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(
        &::hddt::_ComputeTask_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(
        &::hddt::_SynchronizationTask_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(
        &::hddt::_Task_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(
        &::hddt::_TaskChain_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(
        &::hddt::
            _ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(
        &::hddt::_ComputationGraph_RankAssignment_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(
        &::hddt::
            _ComputationGraph_RankHostMappingEntry_DoNotUse_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(
        &::hddt::_ComputationGraph_default_instance_),
};

const char descriptor_table_protodef_hddt_2eproto[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) =
    "\n\nhddt.proto\022\004hddt\"Q\n\010RankInfo\022\014\n\004rank\030\001"
    " \001(\005\022\020\n\010hostname\030\002 "
    "\001(\t\022\022\n\nip_address\030\003 \001"
    "(\t\022\021\n\ttimestamp\030\004 \001(\003\"3\n\022RankInfoCollect"
    "ion\022\035\n\005infos\030\001 \003(\0132\016.hddt.RankInfo\"O\n\021Co"
    "mmunicationTask\022\023\n\013target_rank\030\001 \001(\005\022\022\n\n"
    "ptr_offset\030\002 \001(\003\022\021\n\tdata_size\030\004 "
    "\001(\003\"\232\001\n\013"
    "ComputeTask\022/\n\007op_type\030\001 \001(\0162\036.hddt.Comp"
    "uteTask.OperatorType\022\022\n\nptr_offset\030\002 \001(\003"
    "\022\021\n\tdata_size\030\003 \001(\003\022\r\n\005dtype\030\004 "
    "\001(\t\"$\n\014Op"
    "eratorType\022\n\n\006REDUCE\020\000\022\010\n\004COPY\020\001\"B\n\023Syn"
    "c"
    "hronizationTask\022\022\n\nwait_ranks\030\001 \003(\005\022\027\n\017s"
    "equence_number\030\002 \001(\003\"\270\001\n\004Task\022,\n\tcomm_ta"
    "sk\030\001 \001(\0132\027.hddt.CommunicationTaskH\000\022)\n\014c"
    "ompute_task\030\002 \001(\0132\021.hddt.ComputeTaskH\000\022."
    "\n\tsync_task\030\003 \001(\0132\031.hddt.Synchronization"
    "TaskH\000\022\032\n\022estimated_duration\030\004 \001(\003B\013\n\tta"
    "sk_type\"J\n\tTaskChain\022\031\n\005tasks\030\001 \003(\0132\n.hd"
    "dt.Task\022\020\n\010chain_id\030\002 "
    "\001(\005\022\020\n\010priority\030\003 "
    "\001(\003\"\257\003\n\020ComputationGraph\022:\n\013assignments\030"
    "\001 \003(\0132%.hddt.ComputationGraph.RankAssign"
    "ment\022\025\n\rgraph_version\030\002 \001(\003\022F\n\021rank_host"
    "_mapping\030\003 \003(\0132+.hddt.ComputationGraph.R"
    "ankHostMappingEntry\032\307\001\n\016RankAssignment\022\014"
    "\n\004rank\030\001 \001(\005\022\037\n\006chains\030\002 "
    "\003(\0132\017.hddt.Task"
    "Chain\022P\n\016dependency_map\030\003 \003(\01328.hddt.Com"
    "putationGraph.RankAssignment.DependencyM"
    "apEntry\0324\n\022DependencyMapEntry\022\013\n\003key\030\001 \001"
    "(\005\022\r\n\005value\030\002 "
    "\001(\005:\0028\001\0326\n\024RankHostMapping"
    "Entry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 "
    "\001(\t:\0028\001b\006p"
    "roto3";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    *const descriptor_table_hddt_2eproto_deps[1] = {};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase
    *const descriptor_table_hddt_2eproto_sccs[11] = {
        &scc_info_CommunicationTask_hddt_2eproto.base,
        &scc_info_ComputationGraph_hddt_2eproto.base,
        &scc_info_ComputationGraph_RankAssignment_hddt_2eproto.base,
        &scc_info_ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse_hddt_2eproto
             .base,
        &scc_info_ComputationGraph_RankHostMappingEntry_DoNotUse_hddt_2eproto
             .base,
        &scc_info_ComputeTask_hddt_2eproto.base,
        &scc_info_RankInfo_hddt_2eproto.base,
        &scc_info_RankInfoCollection_hddt_2eproto.base,
        &scc_info_SynchronizationTask_hddt_2eproto.base,
        &scc_info_Task_hddt_2eproto.base,
        &scc_info_TaskChain_hddt_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag
    descriptor_table_hddt_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_hddt_2eproto = {
        false,
        false,
        descriptor_table_protodef_hddt_2eproto,
        "hddt.proto",
        1165,
        &descriptor_table_hddt_2eproto_once,
        descriptor_table_hddt_2eproto_sccs,
        descriptor_table_hddt_2eproto_deps,
        11,
        0,
        schemas,
        file_default_instances,
        TableStruct_hddt_2eproto::offsets,
        file_level_metadata_hddt_2eproto,
        11,
        file_level_enum_descriptors_hddt_2eproto,
        file_level_service_descriptors_hddt_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_hddt_2eproto =
    (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(
         &descriptor_table_hddt_2eproto)),
     true);
namespace hddt {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *
ComputeTask_OperatorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hddt_2eproto);
  return file_level_enum_descriptors_hddt_2eproto[0];
}
bool ComputeTask_OperatorType_IsValid(int value) {
  switch (value) {
  case 0:
  case 1:
    return true;
  default:
    return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ComputeTask_OperatorType ComputeTask::REDUCE;
constexpr ComputeTask_OperatorType ComputeTask::COPY;
constexpr ComputeTask_OperatorType ComputeTask::OperatorType_MIN;
constexpr ComputeTask_OperatorType ComputeTask::OperatorType_MAX;
constexpr int ComputeTask::OperatorType_ARRAYSIZE;
#endif // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void RankInfo::InitAsDefaultInstance() {}
class RankInfo::_Internal {
public:
};

RankInfo::RankInfo(::PROTOBUF_NAMESPACE_ID::Arena *arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hddt.RankInfo)
}
RankInfo::RankInfo(const RankInfo &from) : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  hostname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hostname().empty()) {
    hostname_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_hostname(), GetArena());
  }
  ip_address_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_address().empty()) {
    ip_address_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_ip_address(), GetArena());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
           static_cast<size_t>(reinterpret_cast<char *>(&rank_) -
                               reinterpret_cast<char *>(&timestamp_)) +
               sizeof(rank_));
  // @@protoc_insertion_point(copy_constructor:hddt.RankInfo)
}

void RankInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_RankInfo_hddt_2eproto.base);
  hostname_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0,
           static_cast<size_t>(reinterpret_cast<char *>(&rank_) -
                               reinterpret_cast<char *>(&timestamp_)) +
               sizeof(rank_));
}

RankInfo::~RankInfo() {
  // @@protoc_insertion_point(destructor:hddt.RankInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RankInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hostname_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_address_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RankInfo::ArenaDtor(void *object) {
  RankInfo *_this = reinterpret_cast<RankInfo *>(object);
  (void)_this;
}
void RankInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {}
void RankInfo::SetCachedSize(int size) const { _cached_size_.Set(size); }
const RankInfo &RankInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_RankInfo_hddt_2eproto.base);
  return *internal_default_instance();
}

void RankInfo::Clear() {
  // @@protoc_insertion_point(message_clear_start:hddt.RankInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  hostname_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  ip_address_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  ::memset(&timestamp_, 0,
           static_cast<size_t>(reinterpret_cast<char *>(&rank_) -
                               reinterpret_cast<char *>(&timestamp_)) +
               sizeof(rank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *
RankInfo::_InternalParse(const char *ptr,
                         ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                                                                \
  if (PROTOBUF_PREDICT_FALSE(!(x)))                                            \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // int32 rank = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
        rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    // string hostname = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        auto str = _internal_mutable_hostname();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
            str, ptr, ctx);
        CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
            str, "hddt.RankInfo.hostname"));
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    // string ip_address = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        auto str = _internal_mutable_ip_address();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
            str, ptr, ctx);
        CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
            str, "hddt.RankInfo.ip_address"));
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    // int64 timestamp = 4;
    case 4:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
        timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    default: {
    handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<
                                  ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    } // switch
  }   // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *RankInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8 *target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hddt.RankInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
            1, this->_internal_rank(), target);
  }

  // string hostname = 2;
  if (this->hostname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_hostname().data(),
        static_cast<int>(this->_internal_hostname().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "hddt.RankInfo.hostname");
    target =
        stream->WriteStringMaybeAliased(2, this->_internal_hostname(), target);
  }

  // string ip_address = 3;
  if (this->ip_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_ip_address().data(),
        static_cast<int>(this->_internal_ip_address().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "hddt.RankInfo.ip_address");
    target = stream->WriteStringMaybeAliased(3, this->_internal_ip_address(),
                                             target);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hddt.RankInfo)
  return target;
}

size_t RankInfo::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:hddt.RankInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // string hostname = 2;
  if (this->hostname().size() > 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_hostname());
  }

  // string ip_address = 3;
  if (this->ip_address().size() > 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_ip_address());
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_timestamp());
  }

  // int32 rank = 1;
  if (this->rank() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                this->_internal_rank());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:hddt.RankInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RankInfo *source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankInfo>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:hddt.RankInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:hddt.RankInfo)
    MergeFrom(*source);
  }
}

void RankInfo::MergeFrom(const RankInfo &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:hddt.RankInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.hostname().size() > 0) {
    _internal_set_hostname(from._internal_hostname());
  }
  if (from.ip_address().size() > 0) {
    _internal_set_ip_address(from._internal_ip_address());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
}

void RankInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:hddt.RankInfo)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void RankInfo::CopyFrom(const RankInfo &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:hddt.RankInfo)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool RankInfo::IsInitialized() const { return true; }

void RankInfo::InternalSwap(RankInfo *other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      &other->_internal_metadata_);
  hostname_.Swap(
      &other->hostname_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  ip_address_.Swap(
      &other->ip_address_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RankInfo, rank_) + sizeof(RankInfo::rank_) -
      PROTOBUF_FIELD_OFFSET(RankInfo, timestamp_)>(
      reinterpret_cast<char *>(&timestamp_),
      reinterpret_cast<char *>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RankInfo::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void RankInfoCollection::InitAsDefaultInstance() {}
class RankInfoCollection::_Internal {
public:
};

RankInfoCollection::RankInfoCollection(::PROTOBUF_NAMESPACE_ID::Arena *arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena), infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hddt.RankInfoCollection)
}
RankInfoCollection::RankInfoCollection(const RankInfoCollection &from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), infos_(from.infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hddt.RankInfoCollection)
}

void RankInfoCollection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_RankInfoCollection_hddt_2eproto.base);
}

RankInfoCollection::~RankInfoCollection() {
  // @@protoc_insertion_point(destructor:hddt.RankInfoCollection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RankInfoCollection::SharedDtor() { GOOGLE_DCHECK(GetArena() == nullptr); }

void RankInfoCollection::ArenaDtor(void *object) {
  RankInfoCollection *_this = reinterpret_cast<RankInfoCollection *>(object);
  (void)_this;
}
void RankInfoCollection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {}
void RankInfoCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankInfoCollection &RankInfoCollection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_RankInfoCollection_hddt_2eproto.base);
  return *internal_default_instance();
}

void RankInfoCollection::Clear() {
  // @@protoc_insertion_point(message_clear_start:hddt.RankInfoCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *RankInfoCollection::_InternalParse(
    const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                                                                \
  if (PROTOBUF_PREDICT_FALSE(!(x)))                                            \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // repeated .hddt.RankInfo infos = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        ptr -= 1;
        do {
          ptr += 1;
          ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr))
            break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
      } else
        goto handle_unusual;
      continue;
    default: {
    handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<
                                  ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    } // switch
  }   // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *RankInfoCollection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8 *target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hddt.RankInfoCollection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .hddt.RankInfo infos = 1;
  for (unsigned int i = 0,
                    n = static_cast<unsigned int>(this->_internal_infos_size());
       i < n; i++) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hddt.RankInfoCollection)
  return target;
}

size_t RankInfoCollection::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:hddt.RankInfoCollection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated .hddt.RankInfo infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto &msg : this->infos_) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankInfoCollection::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:hddt.RankInfoCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const RankInfoCollection *source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankInfoCollection>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:hddt.RankInfoCollection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:hddt.RankInfoCollection)
    MergeFrom(*source);
  }
}

void RankInfoCollection::MergeFrom(const RankInfoCollection &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:hddt.RankInfoCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  infos_.MergeFrom(from.infos_);
}

void RankInfoCollection::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:hddt.RankInfoCollection)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void RankInfoCollection::CopyFrom(const RankInfoCollection &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:hddt.RankInfoCollection)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool RankInfoCollection::IsInitialized() const { return true; }

void RankInfoCollection::InternalSwap(RankInfoCollection *other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      &other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankInfoCollection::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void CommunicationTask::InitAsDefaultInstance() {}
class CommunicationTask::_Internal {
public:
};

CommunicationTask::CommunicationTask(::PROTOBUF_NAMESPACE_ID::Arena *arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hddt.CommunicationTask)
}
CommunicationTask::CommunicationTask(const CommunicationTask &from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::memcpy(&ptr_offset_, &from.ptr_offset_,
           static_cast<size_t>(reinterpret_cast<char *>(&target_rank_) -
                               reinterpret_cast<char *>(&ptr_offset_)) +
               sizeof(target_rank_));
  // @@protoc_insertion_point(copy_constructor:hddt.CommunicationTask)
}

void CommunicationTask::SharedCtor() {
  ::memset(&ptr_offset_, 0,
           static_cast<size_t>(reinterpret_cast<char *>(&target_rank_) -
                               reinterpret_cast<char *>(&ptr_offset_)) +
               sizeof(target_rank_));
}

CommunicationTask::~CommunicationTask() {
  // @@protoc_insertion_point(destructor:hddt.CommunicationTask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommunicationTask::SharedDtor() { GOOGLE_DCHECK(GetArena() == nullptr); }

void CommunicationTask::ArenaDtor(void *object) {
  CommunicationTask *_this = reinterpret_cast<CommunicationTask *>(object);
  (void)_this;
}
void CommunicationTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {}
void CommunicationTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommunicationTask &CommunicationTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_CommunicationTask_hddt_2eproto.base);
  return *internal_default_instance();
}

void CommunicationTask::Clear() {
  // @@protoc_insertion_point(message_clear_start:hddt.CommunicationTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::memset(&ptr_offset_, 0,
           static_cast<size_t>(reinterpret_cast<char *>(&target_rank_) -
                               reinterpret_cast<char *>(&ptr_offset_)) +
               sizeof(target_rank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *CommunicationTask::_InternalParse(
    const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                                                                \
  if (PROTOBUF_PREDICT_FALSE(!(x)))                                            \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // int32 target_rank = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
        target_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    // int64 ptr_offset = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
        ptr_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    // int64 data_size = 4;
    case 4:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
        data_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    default: {
    handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<
                                  ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    } // switch
  }   // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *CommunicationTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8 *target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hddt.CommunicationTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 target_rank = 1;
  if (this->target_rank() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
            1, this->_internal_target_rank(), target);
  }

  // int64 ptr_offset = 2;
  if (this->ptr_offset() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            2, this->_internal_ptr_offset(), target);
  }

  // int64 data_size = 4;
  if (this->data_size() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            4, this->_internal_data_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hddt.CommunicationTask)
  return target;
}

size_t CommunicationTask::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:hddt.CommunicationTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // int64 ptr_offset = 2;
  if (this->ptr_offset() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_ptr_offset());
  }

  // int64 data_size = 4;
  if (this->data_size() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_data_size());
  }

  // int32 target_rank = 1;
  if (this->target_rank() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                this->_internal_target_rank());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommunicationTask::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:hddt.CommunicationTask)
  GOOGLE_DCHECK_NE(&from, this);
  const CommunicationTask *source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommunicationTask>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:hddt.CommunicationTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:hddt.CommunicationTask)
    MergeFrom(*source);
  }
}

void CommunicationTask::MergeFrom(const CommunicationTask &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:hddt.CommunicationTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.ptr_offset() != 0) {
    _internal_set_ptr_offset(from._internal_ptr_offset());
  }
  if (from.data_size() != 0) {
    _internal_set_data_size(from._internal_data_size());
  }
  if (from.target_rank() != 0) {
    _internal_set_target_rank(from._internal_target_rank());
  }
}

void CommunicationTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:hddt.CommunicationTask)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void CommunicationTask::CopyFrom(const CommunicationTask &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:hddt.CommunicationTask)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool CommunicationTask::IsInitialized() const { return true; }

void CommunicationTask::InternalSwap(CommunicationTask *other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      &other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommunicationTask, target_rank_) +
      sizeof(CommunicationTask::target_rank_) -
      PROTOBUF_FIELD_OFFSET(CommunicationTask, ptr_offset_)>(
      reinterpret_cast<char *>(&ptr_offset_),
      reinterpret_cast<char *>(&other->ptr_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommunicationTask::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void ComputeTask::InitAsDefaultInstance() {}
class ComputeTask::_Internal {
public:
};

ComputeTask::ComputeTask(::PROTOBUF_NAMESPACE_ID::Arena *arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hddt.ComputeTask)
}
ComputeTask::ComputeTask(const ComputeTask &from)
    : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  dtype_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dtype().empty()) {
    dtype_.Set(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from._internal_dtype(), GetArena());
  }
  ::memcpy(&ptr_offset_, &from.ptr_offset_,
           static_cast<size_t>(reinterpret_cast<char *>(&op_type_) -
                               reinterpret_cast<char *>(&ptr_offset_)) +
               sizeof(op_type_));
  // @@protoc_insertion_point(copy_constructor:hddt.ComputeTask)
}

void ComputeTask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ComputeTask_hddt_2eproto.base);
  dtype_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ptr_offset_, 0,
           static_cast<size_t>(reinterpret_cast<char *>(&op_type_) -
                               reinterpret_cast<char *>(&ptr_offset_)) +
               sizeof(op_type_));
}

ComputeTask::~ComputeTask() {
  // @@protoc_insertion_point(destructor:hddt.ComputeTask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComputeTask::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dtype_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ComputeTask::ArenaDtor(void *object) {
  ComputeTask *_this = reinterpret_cast<ComputeTask *>(object);
  (void)_this;
}
void ComputeTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {}
void ComputeTask::SetCachedSize(int size) const { _cached_size_.Set(size); }
const ComputeTask &ComputeTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ComputeTask_hddt_2eproto.base);
  return *internal_default_instance();
}

void ComputeTask::Clear() {
  // @@protoc_insertion_point(message_clear_start:hddt.ComputeTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  dtype_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  ::memset(&ptr_offset_, 0,
           static_cast<size_t>(reinterpret_cast<char *>(&op_type_) -
                               reinterpret_cast<char *>(&ptr_offset_)) +
               sizeof(op_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *ComputeTask::_InternalParse(
    const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                                                                \
  if (PROTOBUF_PREDICT_FALSE(!(x)))                                            \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // .hddt.ComputeTask.OperatorType op_type = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
        ::PROTOBUF_NAMESPACE_ID::uint64 val =
            ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
        CHK_(ptr);
        _internal_set_op_type(
            static_cast<::hddt::ComputeTask_OperatorType>(val));
      } else
        goto handle_unusual;
      continue;
    // int64 ptr_offset = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
        ptr_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    // int64 data_size = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
        data_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    // string dtype = 4;
    case 4:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
        auto str = _internal_mutable_dtype();
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(
            str, ptr, ctx);
        CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(
            str, "hddt.ComputeTask.dtype"));
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    default: {
    handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<
                                  ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    } // switch
  }   // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *ComputeTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8 *target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hddt.ComputeTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .hddt.ComputeTask.OperatorType op_type = 1;
  if (this->op_type() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
            1, this->_internal_op_type(), target);
  }

  // int64 ptr_offset = 2;
  if (this->ptr_offset() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            2, this->_internal_ptr_offset(), target);
  }

  // int64 data_size = 3;
  if (this->data_size() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            3, this->_internal_data_size(), target);
  }

  // string dtype = 4;
  if (this->dtype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        this->_internal_dtype().data(),
        static_cast<int>(this->_internal_dtype().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "hddt.ComputeTask.dtype");
    target =
        stream->WriteStringMaybeAliased(4, this->_internal_dtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hddt.ComputeTask)
  return target;
}

size_t ComputeTask::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:hddt.ComputeTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // string dtype = 4;
  if (this->dtype().size() > 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->_internal_dtype());
  }

  // int64 ptr_offset = 2;
  if (this->ptr_offset() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_ptr_offset());
  }

  // int64 data_size = 3;
  if (this->data_size() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_data_size());
  }

  // .hddt.ComputeTask.OperatorType op_type = 1;
  if (this->op_type() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
                this->_internal_op_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComputeTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:hddt.ComputeTask)
  GOOGLE_DCHECK_NE(&from, this);
  const ComputeTask *source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComputeTask>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:hddt.ComputeTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:hddt.ComputeTask)
    MergeFrom(*source);
  }
}

void ComputeTask::MergeFrom(const ComputeTask &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:hddt.ComputeTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.dtype().size() > 0) {
    _internal_set_dtype(from._internal_dtype());
  }
  if (from.ptr_offset() != 0) {
    _internal_set_ptr_offset(from._internal_ptr_offset());
  }
  if (from.data_size() != 0) {
    _internal_set_data_size(from._internal_data_size());
  }
  if (from.op_type() != 0) {
    _internal_set_op_type(from._internal_op_type());
  }
}

void ComputeTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:hddt.ComputeTask)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ComputeTask::CopyFrom(const ComputeTask &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:hddt.ComputeTask)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool ComputeTask::IsInitialized() const { return true; }

void ComputeTask::InternalSwap(ComputeTask *other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      &other->_internal_metadata_);
  dtype_.Swap(&other->dtype_,
              &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
              GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComputeTask, op_type_) +
      sizeof(ComputeTask::op_type_) -
      PROTOBUF_FIELD_OFFSET(ComputeTask, ptr_offset_)>(
      reinterpret_cast<char *>(&ptr_offset_),
      reinterpret_cast<char *>(&other->ptr_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComputeTask::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void SynchronizationTask::InitAsDefaultInstance() {}
class SynchronizationTask::_Internal {
public:
};

SynchronizationTask::SynchronizationTask(::PROTOBUF_NAMESPACE_ID::Arena *arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena), wait_ranks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hddt.SynchronizationTask)
}
SynchronizationTask::SynchronizationTask(const SynchronizationTask &from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), wait_ranks_(from.wait_ranks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  sequence_number_ = from.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:hddt.SynchronizationTask)
}

void SynchronizationTask::SharedCtor() {
  sequence_number_ = PROTOBUF_LONGLONG(0);
}

SynchronizationTask::~SynchronizationTask() {
  // @@protoc_insertion_point(destructor:hddt.SynchronizationTask)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SynchronizationTask::SharedDtor() { GOOGLE_DCHECK(GetArena() == nullptr); }

void SynchronizationTask::ArenaDtor(void *object) {
  SynchronizationTask *_this = reinterpret_cast<SynchronizationTask *>(object);
  (void)_this;
}
void SynchronizationTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {}
void SynchronizationTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SynchronizationTask &SynchronizationTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_SynchronizationTask_hddt_2eproto.base);
  return *internal_default_instance();
}

void SynchronizationTask::Clear() {
  // @@protoc_insertion_point(message_clear_start:hddt.SynchronizationTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  wait_ranks_.Clear();
  sequence_number_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *SynchronizationTask::_InternalParse(
    const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                                                                \
  if (PROTOBUF_PREDICT_FALSE(!(x)))                                            \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // repeated int32 wait_ranks = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(
            _internal_mutable_wait_ranks(), ptr, ctx);
        CHK_(ptr);
      } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
        _internal_add_wait_ranks(
            ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    // int64 sequence_number = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
        sequence_number_ =
            ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    default: {
    handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<
                                  ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    } // switch
  }   // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *SynchronizationTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8 *target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hddt.SynchronizationTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated int32 wait_ranks = 1;
  {
    int byte_size =
        _wait_ranks_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(1, _internal_wait_ranks(), byte_size,
                                        target);
    }
  }

  // int64 sequence_number = 2;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            2, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hddt.SynchronizationTask)
  return target;
}

size_t SynchronizationTask::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:hddt.SynchronizationTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated int32 wait_ranks = 1;
  {
    size_t data_size =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            this->wait_ranks_);
    if (data_size > 0) {
      total_size +=
          1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                  static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size =
        ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _wait_ranks_cached_byte_size_.store(cached_size, std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 sequence_number = 2;
  if (this->sequence_number() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_sequence_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SynchronizationTask::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:hddt.SynchronizationTask)
  GOOGLE_DCHECK_NE(&from, this);
  const SynchronizationTask *source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SynchronizationTask>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:hddt.SynchronizationTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:hddt.SynchronizationTask)
    MergeFrom(*source);
  }
}

void SynchronizationTask::MergeFrom(const SynchronizationTask &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:hddt.SynchronizationTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  wait_ranks_.MergeFrom(from.wait_ranks_);
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
}

void SynchronizationTask::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:hddt.SynchronizationTask)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void SynchronizationTask::CopyFrom(const SynchronizationTask &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:hddt.SynchronizationTask)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool SynchronizationTask::IsInitialized() const { return true; }

void SynchronizationTask::InternalSwap(SynchronizationTask *other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      &other->_internal_metadata_);
  wait_ranks_.InternalSwap(&other->wait_ranks_);
  swap(sequence_number_, other->sequence_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SynchronizationTask::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void Task::InitAsDefaultInstance() {
  ::hddt::_Task_default_instance_.comm_task_ =
      const_cast<::hddt::CommunicationTask *>(
          ::hddt::CommunicationTask::internal_default_instance());
  ::hddt::_Task_default_instance_.compute_task_ =
      const_cast<::hddt::ComputeTask *>(
          ::hddt::ComputeTask::internal_default_instance());
  ::hddt::_Task_default_instance_.sync_task_ =
      const_cast<::hddt::SynchronizationTask *>(
          ::hddt::SynchronizationTask::internal_default_instance());
}
class Task::_Internal {
public:
  static const ::hddt::CommunicationTask &comm_task(const Task *msg);
  static const ::hddt::ComputeTask &compute_task(const Task *msg);
  static const ::hddt::SynchronizationTask &sync_task(const Task *msg);
};

const ::hddt::CommunicationTask &Task::_Internal::comm_task(const Task *msg) {
  return *msg->task_type_.comm_task_;
}
const ::hddt::ComputeTask &Task::_Internal::compute_task(const Task *msg) {
  return *msg->task_type_.compute_task_;
}
const ::hddt::SynchronizationTask &Task::_Internal::sync_task(const Task *msg) {
  return *msg->task_type_.sync_task_;
}
void Task::set_allocated_comm_task(::hddt::CommunicationTask *comm_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  clear_task_type();
  if (comm_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(comm_task);
    if (message_arena != submessage_arena) {
      comm_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, comm_task, submessage_arena);
    }
    set_has_comm_task();
    task_type_.comm_task_ = comm_task;
  }
  // @@protoc_insertion_point(field_set_allocated:hddt.Task.comm_task)
}
void Task::set_allocated_compute_task(::hddt::ComputeTask *compute_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  clear_task_type();
  if (compute_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(compute_task);
    if (message_arena != submessage_arena) {
      compute_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compute_task, submessage_arena);
    }
    set_has_compute_task();
    task_type_.compute_task_ = compute_task;
  }
  // @@protoc_insertion_point(field_set_allocated:hddt.Task.compute_task)
}
void Task::set_allocated_sync_task(::hddt::SynchronizationTask *sync_task) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  clear_task_type();
  if (sync_task) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sync_task);
    if (message_arena != submessage_arena) {
      sync_task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_task, submessage_arena);
    }
    set_has_sync_task();
    task_type_.sync_task_ = sync_task;
  }
  // @@protoc_insertion_point(field_set_allocated:hddt.Task.sync_task)
}
Task::Task(::PROTOBUF_NAMESPACE_ID::Arena *arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hddt.Task)
}
Task::Task(const Task &from) : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  estimated_duration_ = from.estimated_duration_;
  clear_has_task_type();
  switch (from.task_type_case()) {
  case kCommTask: {
    _internal_mutable_comm_task()->::hddt::CommunicationTask::MergeFrom(
        from._internal_comm_task());
    break;
  }
  case kComputeTask: {
    _internal_mutable_compute_task()->::hddt::ComputeTask::MergeFrom(
        from._internal_compute_task());
    break;
  }
  case kSyncTask: {
    _internal_mutable_sync_task()->::hddt::SynchronizationTask::MergeFrom(
        from._internal_sync_task());
    break;
  }
  case TASK_TYPE_NOT_SET: {
    break;
  }
  }
  // @@protoc_insertion_point(copy_constructor:hddt.Task)
}

void Task::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Task_hddt_2eproto.base);
  estimated_duration_ = PROTOBUF_LONGLONG(0);
  clear_has_task_type();
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:hddt.Task)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Task::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_task_type()) {
    clear_task_type();
  }
}

void Task::ArenaDtor(void *object) {
  Task *_this = reinterpret_cast<Task *>(object);
  (void)_this;
}
void Task::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {}
void Task::SetCachedSize(int size) const { _cached_size_.Set(size); }
const Task &Task::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_Task_hddt_2eproto.base);
  return *internal_default_instance();
}

void Task::clear_task_type() {
  // @@protoc_insertion_point(one_of_clear_start:hddt.Task)
  switch (task_type_case()) {
  case kCommTask: {
    if (GetArena() == nullptr) {
      delete task_type_.comm_task_;
    }
    break;
  }
  case kComputeTask: {
    if (GetArena() == nullptr) {
      delete task_type_.compute_task_;
    }
    break;
  }
  case kSyncTask: {
    if (GetArena() == nullptr) {
      delete task_type_.sync_task_;
    }
    break;
  }
  case TASK_TYPE_NOT_SET: {
    break;
  }
  }
  _oneof_case_[0] = TASK_TYPE_NOT_SET;
}

void Task::Clear() {
  // @@protoc_insertion_point(message_clear_start:hddt.Task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  estimated_duration_ = PROTOBUF_LONGLONG(0);
  clear_task_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *
Task::_InternalParse(const char *ptr,
                     ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                                                                \
  if (PROTOBUF_PREDICT_FALSE(!(x)))                                            \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // .hddt.CommunicationTask comm_task = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        ptr = ctx->ParseMessage(_internal_mutable_comm_task(), ptr);
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    // .hddt.ComputeTask compute_task = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        ptr = ctx->ParseMessage(_internal_mutable_compute_task(), ptr);
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    // .hddt.SynchronizationTask sync_task = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        ptr = ctx->ParseMessage(_internal_mutable_sync_task(), ptr);
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    // int64 estimated_duration = 4;
    case 4:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
        estimated_duration_ =
            ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    default: {
    handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<
                                  ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    } // switch
  }   // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *Task::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8 *target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hddt.Task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .hddt.CommunicationTask comm_task = 1;
  if (_internal_has_comm_task()) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, _Internal::comm_task(this), target, stream);
  }

  // .hddt.ComputeTask compute_task = 2;
  if (_internal_has_compute_task()) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            2, _Internal::compute_task(this), target, stream);
  }

  // .hddt.SynchronizationTask sync_task = 3;
  if (_internal_has_sync_task()) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            3, _Internal::sync_task(this), target, stream);
  }

  // int64 estimated_duration = 4;
  if (this->estimated_duration() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            4, this->_internal_estimated_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hddt.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:hddt.Task)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // int64 estimated_duration = 4;
  if (this->estimated_duration() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_estimated_duration());
  }

  switch (task_type_case()) {
  // .hddt.CommunicationTask comm_task = 1;
  case kCommTask: {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *task_type_.comm_task_);
    break;
  }
  // .hddt.ComputeTask compute_task = 2;
  case kComputeTask: {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *task_type_.compute_task_);
    break;
  }
  // .hddt.SynchronizationTask sync_task = 3;
  case kSyncTask: {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *task_type_.sync_task_);
    break;
  }
  case TASK_TYPE_NOT_SET: {
    break;
  }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Task::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:hddt.Task)
  GOOGLE_DCHECK_NE(&from, this);
  const Task *source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Task>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:hddt.Task)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:hddt.Task)
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:hddt.Task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.estimated_duration() != 0) {
    _internal_set_estimated_duration(from._internal_estimated_duration());
  }
  switch (from.task_type_case()) {
  case kCommTask: {
    _internal_mutable_comm_task()->::hddt::CommunicationTask::MergeFrom(
        from._internal_comm_task());
    break;
  }
  case kComputeTask: {
    _internal_mutable_compute_task()->::hddt::ComputeTask::MergeFrom(
        from._internal_compute_task());
    break;
  }
  case kSyncTask: {
    _internal_mutable_sync_task()->::hddt::SynchronizationTask::MergeFrom(
        from._internal_sync_task());
    break;
  }
  case TASK_TYPE_NOT_SET: {
    break;
  }
  }
}

void Task::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:hddt.Task)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:hddt.Task)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const { return true; }

void Task::InternalSwap(Task *other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      &other->_internal_metadata_);
  swap(estimated_duration_, other->estimated_duration_);
  swap(task_type_, other->task_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Task::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void TaskChain::InitAsDefaultInstance() {}
class TaskChain::_Internal {
public:
};

TaskChain::TaskChain(::PROTOBUF_NAMESPACE_ID::Arena *arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena), tasks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hddt.TaskChain)
}
TaskChain::TaskChain(const TaskChain &from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::memcpy(&priority_, &from.priority_,
           static_cast<size_t>(reinterpret_cast<char *>(&chain_id_) -
                               reinterpret_cast<char *>(&priority_)) +
               sizeof(chain_id_));
  // @@protoc_insertion_point(copy_constructor:hddt.TaskChain)
}

void TaskChain::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_TaskChain_hddt_2eproto.base);
  ::memset(&priority_, 0,
           static_cast<size_t>(reinterpret_cast<char *>(&chain_id_) -
                               reinterpret_cast<char *>(&priority_)) +
               sizeof(chain_id_));
}

TaskChain::~TaskChain() {
  // @@protoc_insertion_point(destructor:hddt.TaskChain)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskChain::SharedDtor() { GOOGLE_DCHECK(GetArena() == nullptr); }

void TaskChain::ArenaDtor(void *object) {
  TaskChain *_this = reinterpret_cast<TaskChain *>(object);
  (void)_this;
}
void TaskChain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {}
void TaskChain::SetCachedSize(int size) const { _cached_size_.Set(size); }
const TaskChain &TaskChain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_TaskChain_hddt_2eproto.base);
  return *internal_default_instance();
}

void TaskChain::Clear() {
  // @@protoc_insertion_point(message_clear_start:hddt.TaskChain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  tasks_.Clear();
  ::memset(&priority_, 0,
           static_cast<size_t>(reinterpret_cast<char *>(&chain_id_) -
                               reinterpret_cast<char *>(&priority_)) +
               sizeof(chain_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TaskChain::_InternalParse(
    const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                                                                \
  if (PROTOBUF_PREDICT_FALSE(!(x)))                                            \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // repeated .hddt.Task tasks = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        ptr -= 1;
        do {
          ptr += 1;
          ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr))
            break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
      } else
        goto handle_unusual;
      continue;
    // int32 chain_id = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
        chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    // int64 priority = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
        priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    default: {
    handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<
                                  ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    } // switch
  }   // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TaskChain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8 *target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hddt.TaskChain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .hddt.Task tasks = 1;
  for (unsigned int i = 0,
                    n = static_cast<unsigned int>(this->_internal_tasks_size());
       i < n; i++) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, this->_internal_tasks(i), target, stream);
  }

  // int32 chain_id = 2;
  if (this->chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
            2, this->_internal_chain_id(), target);
  }

  // int64 priority = 3;
  if (this->priority() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            3, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hddt.TaskChain)
  return target;
}

size_t TaskChain::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:hddt.TaskChain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated .hddt.Task tasks = 1;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto &msg : this->tasks_) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 priority = 3;
  if (this->priority() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_priority());
  }

  // int32 chain_id = 2;
  if (this->chain_id() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                this->_internal_chain_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskChain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:hddt.TaskChain)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskChain *source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskChain>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:hddt.TaskChain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:hddt.TaskChain)
    MergeFrom(*source);
  }
}

void TaskChain::MergeFrom(const TaskChain &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:hddt.TaskChain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  if (from.priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  if (from.chain_id() != 0) {
    _internal_set_chain_id(from._internal_chain_id());
  }
}

void TaskChain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:hddt.TaskChain)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void TaskChain::CopyFrom(const TaskChain &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:hddt.TaskChain)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool TaskChain::IsInitialized() const { return true; }

void TaskChain::InternalSwap(TaskChain *other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      &other->_internal_metadata_);
  tasks_.InternalSwap(&other->tasks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskChain, chain_id_) +
      sizeof(TaskChain::chain_id_) -
      PROTOBUF_FIELD_OFFSET(TaskChain, priority_)>(
      reinterpret_cast<char *>(&priority_),
      reinterpret_cast<char *>(&other->priority_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskChain::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse::
    ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse() {}
ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse::
    ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse(
        ::PROTOBUF_NAMESPACE_ID::Arena *arena)
    : SuperType(arena) {}
void ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse::MergeFrom(
    const ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse &other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata
ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse::GetMetadata()
    const {
  return GetMetadataStatic();
}
void ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message &other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}

// ===================================================================

void ComputationGraph_RankAssignment::InitAsDefaultInstance() {}
class ComputationGraph_RankAssignment::_Internal {
public:
};

ComputationGraph_RankAssignment::ComputationGraph_RankAssignment(
    ::PROTOBUF_NAMESPACE_ID::Arena *arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena), chains_(arena),
      dependency_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hddt.ComputationGraph.RankAssignment)
}
ComputationGraph_RankAssignment::ComputationGraph_RankAssignment(
    const ComputationGraph_RankAssignment &from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), chains_(from.chains_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  dependency_map_.MergeFrom(from.dependency_map_);
  rank_ = from.rank_;
  // @@protoc_insertion_point(copy_constructor:hddt.ComputationGraph.RankAssignment)
}

void ComputationGraph_RankAssignment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ComputationGraph_RankAssignment_hddt_2eproto.base);
  rank_ = 0;
}

ComputationGraph_RankAssignment::~ComputationGraph_RankAssignment() {
  // @@protoc_insertion_point(destructor:hddt.ComputationGraph.RankAssignment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComputationGraph_RankAssignment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ComputationGraph_RankAssignment::ArenaDtor(void *object) {
  ComputationGraph_RankAssignment *_this =
      reinterpret_cast<ComputationGraph_RankAssignment *>(object);
  (void)_this;
}
void ComputationGraph_RankAssignment::RegisterArenaDtor(
    ::PROTOBUF_NAMESPACE_ID::Arena *) {}
void ComputationGraph_RankAssignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComputationGraph_RankAssignment &
ComputationGraph_RankAssignment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ComputationGraph_RankAssignment_hddt_2eproto.base);
  return *internal_default_instance();
}

void ComputationGraph_RankAssignment::Clear() {
  // @@protoc_insertion_point(message_clear_start:hddt.ComputationGraph.RankAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  chains_.Clear();
  dependency_map_.Clear();
  rank_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *ComputationGraph_RankAssignment::_InternalParse(
    const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                                                                \
  if (PROTOBUF_PREDICT_FALSE(!(x)))                                            \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // int32 rank = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
        rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    // repeated .hddt.TaskChain chains = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        ptr -= 1;
        do {
          ptr += 1;
          ptr = ctx->ParseMessage(_internal_add_chains(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr))
            break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
      } else
        goto handle_unusual;
      continue;
    // map<int32, int32> dependency_map = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        ptr -= 1;
        do {
          ptr += 1;
          ptr = ctx->ParseMessage(&dependency_map_, ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr))
            break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
      } else
        goto handle_unusual;
      continue;
    default: {
    handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<
                                  ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    } // switch
  }   // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *
ComputationGraph_RankAssignment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8 *target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hddt.ComputationGraph.RankAssignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 rank = 1;
  if (this->rank() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
            1, this->_internal_rank(), target);
  }

  // repeated .hddt.TaskChain chains = 2;
  for (unsigned int i = 0, n = static_cast<unsigned int>(
                               this->_internal_chains_size());
       i < n; i++) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            2, this->_internal_chains(i), target, stream);
  }

  // map<int32, int32> dependency_map = 3;
  if (!this->_internal_dependency_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map<
        ::PROTOBUF_NAMESPACE_ID::int32,
        ::PROTOBUF_NAMESPACE_ID::int32>::const_pointer ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem<
        ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr>
        SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem>
        Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_dependency_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_dependency_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map<
          ::PROTOBUF_NAMESPACE_ID::int32,
          ::PROTOBUF_NAMESPACE_ID::int32>::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map<
               ::PROTOBUF_NAMESPACE_ID::int32,
               ::PROTOBUF_NAMESPACE_ID::int32>::const_iterator it =
               this->_internal_dependency_map().begin();
           it != this->_internal_dependency_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse::
            Funcs::InternalSerialize(
                3, items[static_cast<ptrdiff_t>(i)].second->first,
                items[static_cast<ptrdiff_t>(i)].second->second, target,
                stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map<
               ::PROTOBUF_NAMESPACE_ID::int32,
               ::PROTOBUF_NAMESPACE_ID::int32>::const_iterator it =
               this->_internal_dependency_map().begin();
           it != this->_internal_dependency_map().end(); ++it) {
        target = ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse::
            Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hddt.ComputationGraph.RankAssignment)
  return target;
}

size_t ComputationGraph_RankAssignment::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:hddt.ComputationGraph.RankAssignment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated .hddt.TaskChain chains = 2;
  total_size += 1UL * this->_internal_chains_size();
  for (const auto &msg : this->chains_) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<int32, int32> dependency_map = 3;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(
                        this->_internal_dependency_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map<
           ::PROTOBUF_NAMESPACE_ID::int32,
           ::PROTOBUF_NAMESPACE_ID::int32>::const_iterator it =
           this->_internal_dependency_map().begin();
       it != this->_internal_dependency_map().end(); ++it) {
    total_size += ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse::
        Funcs::ByteSizeLong(it->first, it->second);
  }

  // int32 rank = 1;
  if (this->rank() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                this->_internal_rank());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComputationGraph_RankAssignment::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:hddt.ComputationGraph.RankAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  const ComputationGraph_RankAssignment *source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<
          ComputationGraph_RankAssignment>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:hddt.ComputationGraph.RankAssignment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:hddt.ComputationGraph.RankAssignment)
    MergeFrom(*source);
  }
}

void ComputationGraph_RankAssignment::MergeFrom(
    const ComputationGraph_RankAssignment &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:hddt.ComputationGraph.RankAssignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  chains_.MergeFrom(from.chains_);
  dependency_map_.MergeFrom(from.dependency_map_);
  if (from.rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
}

void ComputationGraph_RankAssignment::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:hddt.ComputationGraph.RankAssignment)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ComputationGraph_RankAssignment::CopyFrom(
    const ComputationGraph_RankAssignment &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:hddt.ComputationGraph.RankAssignment)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool ComputationGraph_RankAssignment::IsInitialized() const { return true; }

void ComputationGraph_RankAssignment::InternalSwap(
    ComputationGraph_RankAssignment *other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      &other->_internal_metadata_);
  chains_.InternalSwap(&other->chains_);
  dependency_map_.Swap(&other->dependency_map_);
  swap(rank_, other->rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata
ComputationGraph_RankAssignment::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

ComputationGraph_RankHostMappingEntry_DoNotUse::
    ComputationGraph_RankHostMappingEntry_DoNotUse() {}
ComputationGraph_RankHostMappingEntry_DoNotUse::
    ComputationGraph_RankHostMappingEntry_DoNotUse(
        ::PROTOBUF_NAMESPACE_ID::Arena *arena)
    : SuperType(arena) {}
void ComputationGraph_RankHostMappingEntry_DoNotUse::MergeFrom(
    const ComputationGraph_RankHostMappingEntry_DoNotUse &other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata
ComputationGraph_RankHostMappingEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ComputationGraph_RankHostMappingEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message &other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}

// ===================================================================

void ComputationGraph::InitAsDefaultInstance() {}
class ComputationGraph::_Internal {
public:
};

ComputationGraph::ComputationGraph(::PROTOBUF_NAMESPACE_ID::Arena *arena)
    : ::PROTOBUF_NAMESPACE_ID::Message(arena), assignments_(arena),
      rank_host_mapping_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hddt.ComputationGraph)
}
ComputationGraph::ComputationGraph(const ComputationGraph &from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), assignments_(from.assignments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  rank_host_mapping_.MergeFrom(from.rank_host_mapping_);
  graph_version_ = from.graph_version_;
  // @@protoc_insertion_point(copy_constructor:hddt.ComputationGraph)
}

void ComputationGraph::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_ComputationGraph_hddt_2eproto.base);
  graph_version_ = PROTOBUF_LONGLONG(0);
}

ComputationGraph::~ComputationGraph() {
  // @@protoc_insertion_point(destructor:hddt.ComputationGraph)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComputationGraph::SharedDtor() { GOOGLE_DCHECK(GetArena() == nullptr); }

void ComputationGraph::ArenaDtor(void *object) {
  ComputationGraph *_this = reinterpret_cast<ComputationGraph *>(object);
  (void)_this;
}
void ComputationGraph::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {}
void ComputationGraph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComputationGraph &ComputationGraph::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_ComputationGraph_hddt_2eproto.base);
  return *internal_default_instance();
}

void ComputationGraph::Clear() {
  // @@protoc_insertion_point(message_clear_start:hddt.ComputationGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  assignments_.Clear();
  rank_host_mapping_.Clear();
  graph_version_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *ComputationGraph::_InternalParse(
    const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                                                                \
  if (PROTOBUF_PREDICT_FALSE(!(x)))                                            \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
  (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // repeated .hddt.ComputationGraph.RankAssignment assignments = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
        ptr -= 1;
        do {
          ptr += 1;
          ptr = ctx->ParseMessage(_internal_add_assignments(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr))
            break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
      } else
        goto handle_unusual;
      continue;
    // int64 graph_version = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
        graph_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    // map<int32, string> rank_host_mapping = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        ptr -= 1;
        do {
          ptr += 1;
          ptr = ctx->ParseMessage(&rank_host_mapping_, ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr))
            break;
        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
      } else
        goto handle_unusual;
      continue;
    default: {
    handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag,
                              _internal_metadata_.mutable_unknown_fields<
                                  ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                              ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    } // switch
  }   // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *ComputationGraph::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8 *target,
    ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hddt.ComputationGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .hddt.ComputationGraph.RankAssignment assignments = 1;
  for (unsigned int i = 0, n = static_cast<unsigned int>(
                               this->_internal_assignments_size());
       i < n; i++) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::InternalWriteMessage(
            1, this->_internal_assignments(i), target, stream);
  }

  // int64 graph_version = 2;
  if (this->graph_version() != 0) {
    target = stream->EnsureSpace(target);
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            2, this->_internal_graph_version(), target);
  }

  // map<int32, string> rank_host_mapping = 3;
  if (!this->_internal_rank_host_mapping().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map<::PROTOBUF_NAMESPACE_ID::int32,
                                         std::string>::const_pointer ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem<
        ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr>
        SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem>
        Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            p->second.data(), static_cast<int>(p->second.length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
            "hddt.ComputationGraph.RankHostMappingEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_rank_host_mapping().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_rank_host_mapping().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map<::PROTOBUF_NAMESPACE_ID::int32,
                                           std::string>::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map<::PROTOBUF_NAMESPACE_ID::int32,
                                        std::string>::const_iterator it =
               this->_internal_rank_host_mapping().begin();
           it != this->_internal_rank_host_mapping().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ComputationGraph_RankHostMappingEntry_DoNotUse::Funcs::
            InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first,
                              items[static_cast<ptrdiff_t>(i)].second->second,
                              target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map<::PROTOBUF_NAMESPACE_ID::int32,
                                        std::string>::const_iterator it =
               this->_internal_rank_host_mapping().begin();
           it != this->_internal_rank_host_mapping().end(); ++it) {
        target = ComputationGraph_RankHostMappingEntry_DoNotUse::Funcs::
            InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        InternalSerializeUnknownFieldsToArray(
            _internal_metadata_
                .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                    ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance),
            target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hddt.ComputationGraph)
  return target;
}

size_t ComputationGraph::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:hddt.ComputationGraph)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  // repeated .hddt.ComputationGraph.RankAssignment assignments = 1;
  total_size += 1UL * this->_internal_assignments_size();
  for (const auto &msg : this->assignments_) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<int32, string> rank_host_mapping = 3;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(
                        this->_internal_rank_host_mapping_size());
  for (::PROTOBUF_NAMESPACE_ID::Map<::PROTOBUF_NAMESPACE_ID::int32,
                                    std::string>::const_iterator it =
           this->_internal_rank_host_mapping().begin();
       it != this->_internal_rank_host_mapping().end(); ++it) {
    total_size +=
        ComputationGraph_RankHostMappingEntry_DoNotUse::Funcs::ByteSizeLong(
            it->first, it->second);
  }

  // int64 graph_version = 2;
  if (this->graph_version() != 0) {
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->_internal_graph_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComputationGraph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:hddt.ComputationGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const ComputationGraph *source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComputationGraph>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:hddt.ComputationGraph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:hddt.ComputationGraph)
    MergeFrom(*source);
  }
}

void ComputationGraph::MergeFrom(const ComputationGraph &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:hddt.ComputationGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  assignments_.MergeFrom(from.assignments_);
  rank_host_mapping_.MergeFrom(from.rank_host_mapping_);
  if (from.graph_version() != 0) {
    _internal_set_graph_version(from._internal_graph_version());
  }
}

void ComputationGraph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:hddt.ComputationGraph)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ComputationGraph::CopyFrom(const ComputationGraph &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:hddt.ComputationGraph)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool ComputationGraph::IsInitialized() const { return true; }

void ComputationGraph::InternalSwap(ComputationGraph *other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      &other->_internal_metadata_);
  assignments_.InternalSwap(&other->assignments_);
  rank_host_mapping_.Swap(&other->rank_host_mapping_);
  swap(graph_version_, other->graph_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComputationGraph::GetMetadata() const {
  return GetMetadataStatic();
}

// @@protoc_insertion_point(namespace_scope)
} // namespace hddt
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::hddt::RankInfo *
Arena::CreateMaybeMessage<::hddt::RankInfo>(Arena *arena) {
  return Arena::CreateMessageInternal<::hddt::RankInfo>(arena);
}
template <>
PROTOBUF_NOINLINE ::hddt::RankInfoCollection *
Arena::CreateMaybeMessage<::hddt::RankInfoCollection>(Arena *arena) {
  return Arena::CreateMessageInternal<::hddt::RankInfoCollection>(arena);
}
template <>
PROTOBUF_NOINLINE ::hddt::CommunicationTask *
Arena::CreateMaybeMessage<::hddt::CommunicationTask>(Arena *arena) {
  return Arena::CreateMessageInternal<::hddt::CommunicationTask>(arena);
}
template <>
PROTOBUF_NOINLINE ::hddt::ComputeTask *
Arena::CreateMaybeMessage<::hddt::ComputeTask>(Arena *arena) {
  return Arena::CreateMessageInternal<::hddt::ComputeTask>(arena);
}
template <>
PROTOBUF_NOINLINE ::hddt::SynchronizationTask *
Arena::CreateMaybeMessage<::hddt::SynchronizationTask>(Arena *arena) {
  return Arena::CreateMessageInternal<::hddt::SynchronizationTask>(arena);
}
template <>
PROTOBUF_NOINLINE ::hddt::Task *
Arena::CreateMaybeMessage<::hddt::Task>(Arena *arena) {
  return Arena::CreateMessageInternal<::hddt::Task>(arena);
}
template <>
PROTOBUF_NOINLINE ::hddt::TaskChain *
Arena::CreateMaybeMessage<::hddt::TaskChain>(Arena *arena) {
  return Arena::CreateMessageInternal<::hddt::TaskChain>(arena);
}
template <>
PROTOBUF_NOINLINE ::hddt::
    ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse *
    Arena::CreateMaybeMessage<
        ::hddt::ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse>(
        Arena *arena) {
  return Arena::CreateMessageInternal<
      ::hddt::ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::hddt::ComputationGraph_RankAssignment *
Arena::CreateMaybeMessage<::hddt::ComputationGraph_RankAssignment>(
    Arena *arena) {
  return Arena::CreateMessageInternal<::hddt::ComputationGraph_RankAssignment>(
      arena);
}
template <>
PROTOBUF_NOINLINE ::hddt::ComputationGraph_RankHostMappingEntry_DoNotUse *
Arena::CreateMaybeMessage<
    ::hddt::ComputationGraph_RankHostMappingEntry_DoNotUse>(Arena *arena) {
  return Arena::CreateMessageInternal<
      ::hddt::ComputationGraph_RankHostMappingEntry_DoNotUse>(arena);
}
template <>
PROTOBUF_NOINLINE ::hddt::ComputationGraph *
Arena::CreateMaybeMessage<::hddt::ComputationGraph>(Arena *arena) {
  return Arena::CreateMessageInternal<::hddt::ComputationGraph>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
