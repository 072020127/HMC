// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hddt.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hddt_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hddt_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hddt_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hddt_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hddt_2eproto;
namespace hddt {
class CommunicationTask;
class CommunicationTaskDefaultTypeInternal;
extern CommunicationTaskDefaultTypeInternal _CommunicationTask_default_instance_;
class ComputationGraph;
class ComputationGraphDefaultTypeInternal;
extern ComputationGraphDefaultTypeInternal _ComputationGraph_default_instance_;
class ComputationGraph_RankAssignment;
class ComputationGraph_RankAssignmentDefaultTypeInternal;
extern ComputationGraph_RankAssignmentDefaultTypeInternal _ComputationGraph_RankAssignment_default_instance_;
class ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse;
class ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUseDefaultTypeInternal;
extern ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUseDefaultTypeInternal _ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse_default_instance_;
class ComputationGraph_RankHostMappingEntry_DoNotUse;
class ComputationGraph_RankHostMappingEntry_DoNotUseDefaultTypeInternal;
extern ComputationGraph_RankHostMappingEntry_DoNotUseDefaultTypeInternal _ComputationGraph_RankHostMappingEntry_DoNotUse_default_instance_;
class ComputeTask;
class ComputeTaskDefaultTypeInternal;
extern ComputeTaskDefaultTypeInternal _ComputeTask_default_instance_;
class RankInfo;
class RankInfoDefaultTypeInternal;
extern RankInfoDefaultTypeInternal _RankInfo_default_instance_;
class RankInfoCollection;
class RankInfoCollectionDefaultTypeInternal;
extern RankInfoCollectionDefaultTypeInternal _RankInfoCollection_default_instance_;
class SynchronizationTask;
class SynchronizationTaskDefaultTypeInternal;
extern SynchronizationTaskDefaultTypeInternal _SynchronizationTask_default_instance_;
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TaskChain;
class TaskChainDefaultTypeInternal;
extern TaskChainDefaultTypeInternal _TaskChain_default_instance_;
}  // namespace hddt
PROTOBUF_NAMESPACE_OPEN
template<> ::hddt::CommunicationTask* Arena::CreateMaybeMessage<::hddt::CommunicationTask>(Arena*);
template<> ::hddt::ComputationGraph* Arena::CreateMaybeMessage<::hddt::ComputationGraph>(Arena*);
template<> ::hddt::ComputationGraph_RankAssignment* Arena::CreateMaybeMessage<::hddt::ComputationGraph_RankAssignment>(Arena*);
template<> ::hddt::ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse* Arena::CreateMaybeMessage<::hddt::ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse>(Arena*);
template<> ::hddt::ComputationGraph_RankHostMappingEntry_DoNotUse* Arena::CreateMaybeMessage<::hddt::ComputationGraph_RankHostMappingEntry_DoNotUse>(Arena*);
template<> ::hddt::ComputeTask* Arena::CreateMaybeMessage<::hddt::ComputeTask>(Arena*);
template<> ::hddt::RankInfo* Arena::CreateMaybeMessage<::hddt::RankInfo>(Arena*);
template<> ::hddt::RankInfoCollection* Arena::CreateMaybeMessage<::hddt::RankInfoCollection>(Arena*);
template<> ::hddt::SynchronizationTask* Arena::CreateMaybeMessage<::hddt::SynchronizationTask>(Arena*);
template<> ::hddt::Task* Arena::CreateMaybeMessage<::hddt::Task>(Arena*);
template<> ::hddt::TaskChain* Arena::CreateMaybeMessage<::hddt::TaskChain>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hddt {

enum ComputeTask_OperatorType : int {
  ComputeTask_OperatorType_REDUCE = 0,
  ComputeTask_OperatorType_COPY = 1,
  ComputeTask_OperatorType_ComputeTask_OperatorType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ComputeTask_OperatorType_ComputeTask_OperatorType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ComputeTask_OperatorType_IsValid(int value);
constexpr ComputeTask_OperatorType ComputeTask_OperatorType_OperatorType_MIN = ComputeTask_OperatorType_REDUCE;
constexpr ComputeTask_OperatorType ComputeTask_OperatorType_OperatorType_MAX = ComputeTask_OperatorType_COPY;
constexpr int ComputeTask_OperatorType_OperatorType_ARRAYSIZE = ComputeTask_OperatorType_OperatorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComputeTask_OperatorType_descriptor();
template<typename T>
inline const std::string& ComputeTask_OperatorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ComputeTask_OperatorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ComputeTask_OperatorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ComputeTask_OperatorType_descriptor(), enum_t_value);
}
inline bool ComputeTask_OperatorType_Parse(
    const std::string& name, ComputeTask_OperatorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ComputeTask_OperatorType>(
    ComputeTask_OperatorType_descriptor(), name, value);
}
// ===================================================================

class RankInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hddt.RankInfo) */ {
 public:
  inline RankInfo() : RankInfo(nullptr) {};
  virtual ~RankInfo();

  RankInfo(const RankInfo& from);
  RankInfo(RankInfo&& from) noexcept
    : RankInfo() {
    *this = ::std::move(from);
  }

  inline RankInfo& operator=(const RankInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankInfo& operator=(RankInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankInfo* internal_default_instance() {
    return reinterpret_cast<const RankInfo*>(
               &_RankInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RankInfo& a, RankInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RankInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RankInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankInfo* New() const final {
    return CreateMaybeMessage<RankInfo>(nullptr);
  }

  RankInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankInfo& from);
  void MergeFrom(const RankInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hddt.RankInfo";
  }
  protected:
  explicit RankInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hddt_2eproto);
    return ::descriptor_table_hddt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostnameFieldNumber = 2,
    kIpAddressFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kRankFieldNumber = 1,
  };
  // string hostname = 2;
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hostname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hostname(
      std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // string ip_address = 3;
  void clear_ip_address();
  const std::string& ip_address() const;
  void set_ip_address(const std::string& value);
  void set_ip_address(std::string&& value);
  void set_ip_address(const char* value);
  void set_ip_address(const char* value, size_t size);
  std::string* mutable_ip_address();
  std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip_address(
      std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 rank = 1;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hddt.RankInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hddt_2eproto;
};
// -------------------------------------------------------------------

class RankInfoCollection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hddt.RankInfoCollection) */ {
 public:
  inline RankInfoCollection() : RankInfoCollection(nullptr) {};
  virtual ~RankInfoCollection();

  RankInfoCollection(const RankInfoCollection& from);
  RankInfoCollection(RankInfoCollection&& from) noexcept
    : RankInfoCollection() {
    *this = ::std::move(from);
  }

  inline RankInfoCollection& operator=(const RankInfoCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankInfoCollection& operator=(RankInfoCollection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankInfoCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankInfoCollection* internal_default_instance() {
    return reinterpret_cast<const RankInfoCollection*>(
               &_RankInfoCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RankInfoCollection& a, RankInfoCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(RankInfoCollection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RankInfoCollection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankInfoCollection* New() const final {
    return CreateMaybeMessage<RankInfoCollection>(nullptr);
  }

  RankInfoCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankInfoCollection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankInfoCollection& from);
  void MergeFrom(const RankInfoCollection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankInfoCollection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hddt.RankInfoCollection";
  }
  protected:
  explicit RankInfoCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hddt_2eproto);
    return ::descriptor_table_hddt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 1,
  };
  // repeated .hddt.RankInfo infos = 1;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::hddt::RankInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hddt::RankInfo >*
      mutable_infos();
  private:
  const ::hddt::RankInfo& _internal_infos(int index) const;
  ::hddt::RankInfo* _internal_add_infos();
  public:
  const ::hddt::RankInfo& infos(int index) const;
  ::hddt::RankInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hddt::RankInfo >&
      infos() const;

  // @@protoc_insertion_point(class_scope:hddt.RankInfoCollection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hddt::RankInfo > infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hddt_2eproto;
};
// -------------------------------------------------------------------

class CommunicationTask PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hddt.CommunicationTask) */ {
 public:
  inline CommunicationTask() : CommunicationTask(nullptr) {};
  virtual ~CommunicationTask();

  CommunicationTask(const CommunicationTask& from);
  CommunicationTask(CommunicationTask&& from) noexcept
    : CommunicationTask() {
    *this = ::std::move(from);
  }

  inline CommunicationTask& operator=(const CommunicationTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommunicationTask& operator=(CommunicationTask&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommunicationTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommunicationTask* internal_default_instance() {
    return reinterpret_cast<const CommunicationTask*>(
               &_CommunicationTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommunicationTask& a, CommunicationTask& b) {
    a.Swap(&b);
  }
  inline void Swap(CommunicationTask* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommunicationTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommunicationTask* New() const final {
    return CreateMaybeMessage<CommunicationTask>(nullptr);
  }

  CommunicationTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommunicationTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommunicationTask& from);
  void MergeFrom(const CommunicationTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunicationTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hddt.CommunicationTask";
  }
  protected:
  explicit CommunicationTask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hddt_2eproto);
    return ::descriptor_table_hddt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtrOffsetFieldNumber = 2,
    kDataSizeFieldNumber = 4,
    kTargetRankFieldNumber = 1,
  };
  // int64 ptr_offset = 2;
  void clear_ptr_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 ptr_offset() const;
  void set_ptr_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ptr_offset() const;
  void _internal_set_ptr_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 data_size = 4;
  void clear_data_size();
  ::PROTOBUF_NAMESPACE_ID::int64 data_size() const;
  void set_data_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_data_size() const;
  void _internal_set_data_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 target_rank = 1;
  void clear_target_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 target_rank() const;
  void set_target_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_target_rank() const;
  void _internal_set_target_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hddt.CommunicationTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 ptr_offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 data_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_rank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hddt_2eproto;
};
// -------------------------------------------------------------------

class ComputeTask PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hddt.ComputeTask) */ {
 public:
  inline ComputeTask() : ComputeTask(nullptr) {};
  virtual ~ComputeTask();

  ComputeTask(const ComputeTask& from);
  ComputeTask(ComputeTask&& from) noexcept
    : ComputeTask() {
    *this = ::std::move(from);
  }

  inline ComputeTask& operator=(const ComputeTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComputeTask& operator=(ComputeTask&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComputeTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComputeTask* internal_default_instance() {
    return reinterpret_cast<const ComputeTask*>(
               &_ComputeTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ComputeTask& a, ComputeTask& b) {
    a.Swap(&b);
  }
  inline void Swap(ComputeTask* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComputeTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComputeTask* New() const final {
    return CreateMaybeMessage<ComputeTask>(nullptr);
  }

  ComputeTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComputeTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComputeTask& from);
  void MergeFrom(const ComputeTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComputeTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hddt.ComputeTask";
  }
  protected:
  explicit ComputeTask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hddt_2eproto);
    return ::descriptor_table_hddt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ComputeTask_OperatorType OperatorType;
  static constexpr OperatorType REDUCE =
    ComputeTask_OperatorType_REDUCE;
  static constexpr OperatorType COPY =
    ComputeTask_OperatorType_COPY;
  static inline bool OperatorType_IsValid(int value) {
    return ComputeTask_OperatorType_IsValid(value);
  }
  static constexpr OperatorType OperatorType_MIN =
    ComputeTask_OperatorType_OperatorType_MIN;
  static constexpr OperatorType OperatorType_MAX =
    ComputeTask_OperatorType_OperatorType_MAX;
  static constexpr int OperatorType_ARRAYSIZE =
    ComputeTask_OperatorType_OperatorType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OperatorType_descriptor() {
    return ComputeTask_OperatorType_descriptor();
  }
  template<typename T>
  static inline const std::string& OperatorType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OperatorType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OperatorType_Name.");
    return ComputeTask_OperatorType_Name(enum_t_value);
  }
  static inline bool OperatorType_Parse(const std::string& name,
      OperatorType* value) {
    return ComputeTask_OperatorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDtypeFieldNumber = 4,
    kPtrOffsetFieldNumber = 2,
    kDataSizeFieldNumber = 3,
    kOpTypeFieldNumber = 1,
  };
  // string dtype = 4;
  void clear_dtype();
  const std::string& dtype() const;
  void set_dtype(const std::string& value);
  void set_dtype(std::string&& value);
  void set_dtype(const char* value);
  void set_dtype(const char* value, size_t size);
  std::string* mutable_dtype();
  std::string* release_dtype();
  void set_allocated_dtype(std::string* dtype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dtype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dtype(
      std::string* dtype);
  private:
  const std::string& _internal_dtype() const;
  void _internal_set_dtype(const std::string& value);
  std::string* _internal_mutable_dtype();
  public:

  // int64 ptr_offset = 2;
  void clear_ptr_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 ptr_offset() const;
  void set_ptr_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ptr_offset() const;
  void _internal_set_ptr_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 data_size = 3;
  void clear_data_size();
  ::PROTOBUF_NAMESPACE_ID::int64 data_size() const;
  void set_data_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_data_size() const;
  void _internal_set_data_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .hddt.ComputeTask.OperatorType op_type = 1;
  void clear_op_type();
  ::hddt::ComputeTask_OperatorType op_type() const;
  void set_op_type(::hddt::ComputeTask_OperatorType value);
  private:
  ::hddt::ComputeTask_OperatorType _internal_op_type() const;
  void _internal_set_op_type(::hddt::ComputeTask_OperatorType value);
  public:

  // @@protoc_insertion_point(class_scope:hddt.ComputeTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dtype_;
  ::PROTOBUF_NAMESPACE_ID::int64 ptr_offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 data_size_;
  int op_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hddt_2eproto;
};
// -------------------------------------------------------------------

class SynchronizationTask PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hddt.SynchronizationTask) */ {
 public:
  inline SynchronizationTask() : SynchronizationTask(nullptr) {};
  virtual ~SynchronizationTask();

  SynchronizationTask(const SynchronizationTask& from);
  SynchronizationTask(SynchronizationTask&& from) noexcept
    : SynchronizationTask() {
    *this = ::std::move(from);
  }

  inline SynchronizationTask& operator=(const SynchronizationTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline SynchronizationTask& operator=(SynchronizationTask&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SynchronizationTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SynchronizationTask* internal_default_instance() {
    return reinterpret_cast<const SynchronizationTask*>(
               &_SynchronizationTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SynchronizationTask& a, SynchronizationTask& b) {
    a.Swap(&b);
  }
  inline void Swap(SynchronizationTask* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SynchronizationTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SynchronizationTask* New() const final {
    return CreateMaybeMessage<SynchronizationTask>(nullptr);
  }

  SynchronizationTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SynchronizationTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SynchronizationTask& from);
  void MergeFrom(const SynchronizationTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SynchronizationTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hddt.SynchronizationTask";
  }
  protected:
  explicit SynchronizationTask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hddt_2eproto);
    return ::descriptor_table_hddt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaitRanksFieldNumber = 1,
    kSequenceNumberFieldNumber = 2,
  };
  // repeated int32 wait_ranks = 1;
  int wait_ranks_size() const;
  private:
  int _internal_wait_ranks_size() const;
  public:
  void clear_wait_ranks();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wait_ranks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_wait_ranks() const;
  void _internal_add_wait_ranks(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_wait_ranks();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 wait_ranks(int index) const;
  void set_wait_ranks(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_wait_ranks(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      wait_ranks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_wait_ranks();

  // int64 sequence_number = 2;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int64 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hddt.SynchronizationTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > wait_ranks_;
  mutable std::atomic<int> _wait_ranks_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 sequence_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hddt_2eproto;
};
// -------------------------------------------------------------------

class Task PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hddt.Task) */ {
 public:
  inline Task() : Task(nullptr) {};
  virtual ~Task();

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Task& default_instance();

  enum TaskTypeCase {
    kCommTask = 1,
    kComputeTask = 2,
    kSyncTask = 3,
    TASK_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return CreateMaybeMessage<Task>(nullptr);
  }

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hddt.Task";
  }
  protected:
  explicit Task(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hddt_2eproto);
    return ::descriptor_table_hddt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEstimatedDurationFieldNumber = 4,
    kCommTaskFieldNumber = 1,
    kComputeTaskFieldNumber = 2,
    kSyncTaskFieldNumber = 3,
  };
  // int64 estimated_duration = 4;
  void clear_estimated_duration();
  ::PROTOBUF_NAMESPACE_ID::int64 estimated_duration() const;
  void set_estimated_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_estimated_duration() const;
  void _internal_set_estimated_duration(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .hddt.CommunicationTask comm_task = 1;
  bool has_comm_task() const;
  private:
  bool _internal_has_comm_task() const;
  public:
  void clear_comm_task();
  const ::hddt::CommunicationTask& comm_task() const;
  ::hddt::CommunicationTask* release_comm_task();
  ::hddt::CommunicationTask* mutable_comm_task();
  void set_allocated_comm_task(::hddt::CommunicationTask* comm_task);
  private:
  const ::hddt::CommunicationTask& _internal_comm_task() const;
  ::hddt::CommunicationTask* _internal_mutable_comm_task();
  public:
  void unsafe_arena_set_allocated_comm_task(
      ::hddt::CommunicationTask* comm_task);
  ::hddt::CommunicationTask* unsafe_arena_release_comm_task();

  // .hddt.ComputeTask compute_task = 2;
  bool has_compute_task() const;
  private:
  bool _internal_has_compute_task() const;
  public:
  void clear_compute_task();
  const ::hddt::ComputeTask& compute_task() const;
  ::hddt::ComputeTask* release_compute_task();
  ::hddt::ComputeTask* mutable_compute_task();
  void set_allocated_compute_task(::hddt::ComputeTask* compute_task);
  private:
  const ::hddt::ComputeTask& _internal_compute_task() const;
  ::hddt::ComputeTask* _internal_mutable_compute_task();
  public:
  void unsafe_arena_set_allocated_compute_task(
      ::hddt::ComputeTask* compute_task);
  ::hddt::ComputeTask* unsafe_arena_release_compute_task();

  // .hddt.SynchronizationTask sync_task = 3;
  bool has_sync_task() const;
  private:
  bool _internal_has_sync_task() const;
  public:
  void clear_sync_task();
  const ::hddt::SynchronizationTask& sync_task() const;
  ::hddt::SynchronizationTask* release_sync_task();
  ::hddt::SynchronizationTask* mutable_sync_task();
  void set_allocated_sync_task(::hddt::SynchronizationTask* sync_task);
  private:
  const ::hddt::SynchronizationTask& _internal_sync_task() const;
  ::hddt::SynchronizationTask* _internal_mutable_sync_task();
  public:
  void unsafe_arena_set_allocated_sync_task(
      ::hddt::SynchronizationTask* sync_task);
  ::hddt::SynchronizationTask* unsafe_arena_release_sync_task();

  void clear_task_type();
  TaskTypeCase task_type_case() const;
  // @@protoc_insertion_point(class_scope:hddt.Task)
 private:
  class _Internal;
  void set_has_comm_task();
  void set_has_compute_task();
  void set_has_sync_task();

  inline bool has_task_type() const;
  inline void clear_has_task_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 estimated_duration_;
  union TaskTypeUnion {
    TaskTypeUnion() {}
    ::hddt::CommunicationTask* comm_task_;
    ::hddt::ComputeTask* compute_task_;
    ::hddt::SynchronizationTask* sync_task_;
  } task_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_hddt_2eproto;
};
// -------------------------------------------------------------------

class TaskChain PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hddt.TaskChain) */ {
 public:
  inline TaskChain() : TaskChain(nullptr) {};
  virtual ~TaskChain();

  TaskChain(const TaskChain& from);
  TaskChain(TaskChain&& from) noexcept
    : TaskChain() {
    *this = ::std::move(from);
  }

  inline TaskChain& operator=(const TaskChain& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskChain& operator=(TaskChain&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskChain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskChain* internal_default_instance() {
    return reinterpret_cast<const TaskChain*>(
               &_TaskChain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TaskChain& a, TaskChain& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskChain* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskChain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskChain* New() const final {
    return CreateMaybeMessage<TaskChain>(nullptr);
  }

  TaskChain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskChain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskChain& from);
  void MergeFrom(const TaskChain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskChain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hddt.TaskChain";
  }
  protected:
  explicit TaskChain(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hddt_2eproto);
    return ::descriptor_table_hddt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 1,
    kPriorityFieldNumber = 3,
    kChainIdFieldNumber = 2,
  };
  // repeated .hddt.Task tasks = 1;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::hddt::Task* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hddt::Task >*
      mutable_tasks();
  private:
  const ::hddt::Task& _internal_tasks(int index) const;
  ::hddt::Task* _internal_add_tasks();
  public:
  const ::hddt::Task& tasks(int index) const;
  ::hddt::Task* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hddt::Task >&
      tasks() const;

  // int64 priority = 3;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int64 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 chain_id = 2;
  void clear_chain_id();
  ::PROTOBUF_NAMESPACE_ID::int32 chain_id() const;
  void set_chain_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chain_id() const;
  void _internal_set_chain_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hddt.TaskChain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hddt::Task > tasks_;
  ::PROTOBUF_NAMESPACE_ID::int64 priority_;
  ::PROTOBUF_NAMESPACE_ID::int32 chain_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hddt_2eproto;
};
// -------------------------------------------------------------------

class ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse();
  ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse& other);
  static const ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse*>(&_ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hddt_2eproto);
    return ::descriptor_table_hddt_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class ComputationGraph_RankAssignment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hddt.ComputationGraph.RankAssignment) */ {
 public:
  inline ComputationGraph_RankAssignment() : ComputationGraph_RankAssignment(nullptr) {};
  virtual ~ComputationGraph_RankAssignment();

  ComputationGraph_RankAssignment(const ComputationGraph_RankAssignment& from);
  ComputationGraph_RankAssignment(ComputationGraph_RankAssignment&& from) noexcept
    : ComputationGraph_RankAssignment() {
    *this = ::std::move(from);
  }

  inline ComputationGraph_RankAssignment& operator=(const ComputationGraph_RankAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComputationGraph_RankAssignment& operator=(ComputationGraph_RankAssignment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComputationGraph_RankAssignment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComputationGraph_RankAssignment* internal_default_instance() {
    return reinterpret_cast<const ComputationGraph_RankAssignment*>(
               &_ComputationGraph_RankAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ComputationGraph_RankAssignment& a, ComputationGraph_RankAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(ComputationGraph_RankAssignment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComputationGraph_RankAssignment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComputationGraph_RankAssignment* New() const final {
    return CreateMaybeMessage<ComputationGraph_RankAssignment>(nullptr);
  }

  ComputationGraph_RankAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComputationGraph_RankAssignment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComputationGraph_RankAssignment& from);
  void MergeFrom(const ComputationGraph_RankAssignment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComputationGraph_RankAssignment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hddt.ComputationGraph.RankAssignment";
  }
  protected:
  explicit ComputationGraph_RankAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hddt_2eproto);
    return ::descriptor_table_hddt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kChainsFieldNumber = 2,
    kDependencyMapFieldNumber = 3,
    kRankFieldNumber = 1,
  };
  // repeated .hddt.TaskChain chains = 2;
  int chains_size() const;
  private:
  int _internal_chains_size() const;
  public:
  void clear_chains();
  ::hddt::TaskChain* mutable_chains(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hddt::TaskChain >*
      mutable_chains();
  private:
  const ::hddt::TaskChain& _internal_chains(int index) const;
  ::hddt::TaskChain* _internal_add_chains();
  public:
  const ::hddt::TaskChain& chains(int index) const;
  ::hddt::TaskChain* add_chains();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hddt::TaskChain >&
      chains() const;

  // map<int32, int32> dependency_map = 3;
  int dependency_map_size() const;
  private:
  int _internal_dependency_map_size() const;
  public:
  void clear_dependency_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_dependency_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_dependency_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      dependency_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_dependency_map();

  // int32 rank = 1;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hddt.ComputationGraph.RankAssignment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hddt::TaskChain > chains_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ComputationGraph_RankAssignment_DependencyMapEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      0 > dependency_map_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hddt_2eproto;
};
// -------------------------------------------------------------------

class ComputationGraph_RankHostMappingEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ComputationGraph_RankHostMappingEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ComputationGraph_RankHostMappingEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ComputationGraph_RankHostMappingEntry_DoNotUse();
  ComputationGraph_RankHostMappingEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ComputationGraph_RankHostMappingEntry_DoNotUse& other);
  static const ComputationGraph_RankHostMappingEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ComputationGraph_RankHostMappingEntry_DoNotUse*>(&_ComputationGraph_RankHostMappingEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "hddt.ComputationGraph.RankHostMappingEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hddt_2eproto);
    return ::descriptor_table_hddt_2eproto.file_level_metadata[9];
  }

  public:
};

// -------------------------------------------------------------------

class ComputationGraph PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hddt.ComputationGraph) */ {
 public:
  inline ComputationGraph() : ComputationGraph(nullptr) {};
  virtual ~ComputationGraph();

  ComputationGraph(const ComputationGraph& from);
  ComputationGraph(ComputationGraph&& from) noexcept
    : ComputationGraph() {
    *this = ::std::move(from);
  }

  inline ComputationGraph& operator=(const ComputationGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComputationGraph& operator=(ComputationGraph&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComputationGraph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComputationGraph* internal_default_instance() {
    return reinterpret_cast<const ComputationGraph*>(
               &_ComputationGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ComputationGraph& a, ComputationGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(ComputationGraph* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComputationGraph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComputationGraph* New() const final {
    return CreateMaybeMessage<ComputationGraph>(nullptr);
  }

  ComputationGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComputationGraph>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComputationGraph& from);
  void MergeFrom(const ComputationGraph& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComputationGraph* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hddt.ComputationGraph";
  }
  protected:
  explicit ComputationGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_hddt_2eproto);
    return ::descriptor_table_hddt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ComputationGraph_RankAssignment RankAssignment;

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentsFieldNumber = 1,
    kRankHostMappingFieldNumber = 3,
    kGraphVersionFieldNumber = 2,
  };
  // repeated .hddt.ComputationGraph.RankAssignment assignments = 1;
  int assignments_size() const;
  private:
  int _internal_assignments_size() const;
  public:
  void clear_assignments();
  ::hddt::ComputationGraph_RankAssignment* mutable_assignments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hddt::ComputationGraph_RankAssignment >*
      mutable_assignments();
  private:
  const ::hddt::ComputationGraph_RankAssignment& _internal_assignments(int index) const;
  ::hddt::ComputationGraph_RankAssignment* _internal_add_assignments();
  public:
  const ::hddt::ComputationGraph_RankAssignment& assignments(int index) const;
  ::hddt::ComputationGraph_RankAssignment* add_assignments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hddt::ComputationGraph_RankAssignment >&
      assignments() const;

  // map<int32, string> rank_host_mapping = 3;
  int rank_host_mapping_size() const;
  private:
  int _internal_rank_host_mapping_size() const;
  public:
  void clear_rank_host_mapping();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      _internal_rank_host_mapping() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      _internal_mutable_rank_host_mapping();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      rank_host_mapping() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      mutable_rank_host_mapping();

  // int64 graph_version = 2;
  void clear_graph_version();
  ::PROTOBUF_NAMESPACE_ID::int64 graph_version() const;
  void set_graph_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_graph_version() const;
  void _internal_set_graph_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hddt.ComputationGraph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hddt::ComputationGraph_RankAssignment > assignments_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ComputationGraph_RankHostMappingEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > rank_host_mapping_;
  ::PROTOBUF_NAMESPACE_ID::int64 graph_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hddt_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RankInfo

// int32 rank = 1;
inline void RankInfo::clear_rank() {
  rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankInfo::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankInfo::rank() const {
  // @@protoc_insertion_point(field_get:hddt.RankInfo.rank)
  return _internal_rank();
}
inline void RankInfo::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank_ = value;
}
inline void RankInfo::set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:hddt.RankInfo.rank)
}

// string hostname = 2;
inline void RankInfo::clear_hostname() {
  hostname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RankInfo::hostname() const {
  // @@protoc_insertion_point(field_get:hddt.RankInfo.hostname)
  return _internal_hostname();
}
inline void RankInfo::set_hostname(const std::string& value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:hddt.RankInfo.hostname)
}
inline std::string* RankInfo::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:hddt.RankInfo.hostname)
  return _internal_mutable_hostname();
}
inline const std::string& RankInfo::_internal_hostname() const {
  return hostname_.Get();
}
inline void RankInfo::_internal_set_hostname(const std::string& value) {
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RankInfo::set_hostname(std::string&& value) {
  
  hostname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hddt.RankInfo.hostname)
}
inline void RankInfo::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hddt.RankInfo.hostname)
}
inline void RankInfo::set_hostname(const char* value,
    size_t size) {
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hddt.RankInfo.hostname)
}
inline std::string* RankInfo::_internal_mutable_hostname() {
  
  return hostname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RankInfo::release_hostname() {
  // @@protoc_insertion_point(field_release:hddt.RankInfo.hostname)
  return hostname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RankInfo::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hddt.RankInfo.hostname)
}
inline std::string* RankInfo::unsafe_arena_release_hostname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hddt.RankInfo.hostname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return hostname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RankInfo::unsafe_arena_set_allocated_hostname(
    std::string* hostname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hostname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hddt.RankInfo.hostname)
}

// string ip_address = 3;
inline void RankInfo::clear_ip_address() {
  ip_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RankInfo::ip_address() const {
  // @@protoc_insertion_point(field_get:hddt.RankInfo.ip_address)
  return _internal_ip_address();
}
inline void RankInfo::set_ip_address(const std::string& value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:hddt.RankInfo.ip_address)
}
inline std::string* RankInfo::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable:hddt.RankInfo.ip_address)
  return _internal_mutable_ip_address();
}
inline const std::string& RankInfo::_internal_ip_address() const {
  return ip_address_.Get();
}
inline void RankInfo::_internal_set_ip_address(const std::string& value) {
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RankInfo::set_ip_address(std::string&& value) {
  
  ip_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hddt.RankInfo.ip_address)
}
inline void RankInfo::set_ip_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hddt.RankInfo.ip_address)
}
inline void RankInfo::set_ip_address(const char* value,
    size_t size) {
  
  ip_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hddt.RankInfo.ip_address)
}
inline std::string* RankInfo::_internal_mutable_ip_address() {
  
  return ip_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RankInfo::release_ip_address() {
  // @@protoc_insertion_point(field_release:hddt.RankInfo.ip_address)
  return ip_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RankInfo::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hddt.RankInfo.ip_address)
}
inline std::string* RankInfo::unsafe_arena_release_ip_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hddt.RankInfo.ip_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RankInfo::unsafe_arena_set_allocated_ip_address(
    std::string* ip_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip_address != nullptr) {
    
  } else {
    
  }
  ip_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hddt.RankInfo.ip_address)
}

// int64 timestamp = 4;
inline void RankInfo::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RankInfo::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RankInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:hddt.RankInfo.timestamp)
  return _internal_timestamp();
}
inline void RankInfo::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void RankInfo::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:hddt.RankInfo.timestamp)
}

// -------------------------------------------------------------------

// RankInfoCollection

// repeated .hddt.RankInfo infos = 1;
inline int RankInfoCollection::_internal_infos_size() const {
  return infos_.size();
}
inline int RankInfoCollection::infos_size() const {
  return _internal_infos_size();
}
inline void RankInfoCollection::clear_infos() {
  infos_.Clear();
}
inline ::hddt::RankInfo* RankInfoCollection::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:hddt.RankInfoCollection.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hddt::RankInfo >*
RankInfoCollection::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:hddt.RankInfoCollection.infos)
  return &infos_;
}
inline const ::hddt::RankInfo& RankInfoCollection::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::hddt::RankInfo& RankInfoCollection::infos(int index) const {
  // @@protoc_insertion_point(field_get:hddt.RankInfoCollection.infos)
  return _internal_infos(index);
}
inline ::hddt::RankInfo* RankInfoCollection::_internal_add_infos() {
  return infos_.Add();
}
inline ::hddt::RankInfo* RankInfoCollection::add_infos() {
  // @@protoc_insertion_point(field_add:hddt.RankInfoCollection.infos)
  return _internal_add_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hddt::RankInfo >&
RankInfoCollection::infos() const {
  // @@protoc_insertion_point(field_list:hddt.RankInfoCollection.infos)
  return infos_;
}

// -------------------------------------------------------------------

// CommunicationTask

// int32 target_rank = 1;
inline void CommunicationTask::clear_target_rank() {
  target_rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunicationTask::_internal_target_rank() const {
  return target_rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunicationTask::target_rank() const {
  // @@protoc_insertion_point(field_get:hddt.CommunicationTask.target_rank)
  return _internal_target_rank();
}
inline void CommunicationTask::_internal_set_target_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_rank_ = value;
}
inline void CommunicationTask::set_target_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_target_rank(value);
  // @@protoc_insertion_point(field_set:hddt.CommunicationTask.target_rank)
}

// int64 ptr_offset = 2;
inline void CommunicationTask::clear_ptr_offset() {
  ptr_offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommunicationTask::_internal_ptr_offset() const {
  return ptr_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommunicationTask::ptr_offset() const {
  // @@protoc_insertion_point(field_get:hddt.CommunicationTask.ptr_offset)
  return _internal_ptr_offset();
}
inline void CommunicationTask::_internal_set_ptr_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ptr_offset_ = value;
}
inline void CommunicationTask::set_ptr_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ptr_offset(value);
  // @@protoc_insertion_point(field_set:hddt.CommunicationTask.ptr_offset)
}

// int64 data_size = 4;
inline void CommunicationTask::clear_data_size() {
  data_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommunicationTask::_internal_data_size() const {
  return data_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommunicationTask::data_size() const {
  // @@protoc_insertion_point(field_get:hddt.CommunicationTask.data_size)
  return _internal_data_size();
}
inline void CommunicationTask::_internal_set_data_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  data_size_ = value;
}
inline void CommunicationTask::set_data_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_data_size(value);
  // @@protoc_insertion_point(field_set:hddt.CommunicationTask.data_size)
}

// -------------------------------------------------------------------

// ComputeTask

// .hddt.ComputeTask.OperatorType op_type = 1;
inline void ComputeTask::clear_op_type() {
  op_type_ = 0;
}
inline ::hddt::ComputeTask_OperatorType ComputeTask::_internal_op_type() const {
  return static_cast< ::hddt::ComputeTask_OperatorType >(op_type_);
}
inline ::hddt::ComputeTask_OperatorType ComputeTask::op_type() const {
  // @@protoc_insertion_point(field_get:hddt.ComputeTask.op_type)
  return _internal_op_type();
}
inline void ComputeTask::_internal_set_op_type(::hddt::ComputeTask_OperatorType value) {
  
  op_type_ = value;
}
inline void ComputeTask::set_op_type(::hddt::ComputeTask_OperatorType value) {
  _internal_set_op_type(value);
  // @@protoc_insertion_point(field_set:hddt.ComputeTask.op_type)
}

// int64 ptr_offset = 2;
inline void ComputeTask::clear_ptr_offset() {
  ptr_offset_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ComputeTask::_internal_ptr_offset() const {
  return ptr_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ComputeTask::ptr_offset() const {
  // @@protoc_insertion_point(field_get:hddt.ComputeTask.ptr_offset)
  return _internal_ptr_offset();
}
inline void ComputeTask::_internal_set_ptr_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ptr_offset_ = value;
}
inline void ComputeTask::set_ptr_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ptr_offset(value);
  // @@protoc_insertion_point(field_set:hddt.ComputeTask.ptr_offset)
}

// int64 data_size = 3;
inline void ComputeTask::clear_data_size() {
  data_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ComputeTask::_internal_data_size() const {
  return data_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ComputeTask::data_size() const {
  // @@protoc_insertion_point(field_get:hddt.ComputeTask.data_size)
  return _internal_data_size();
}
inline void ComputeTask::_internal_set_data_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  data_size_ = value;
}
inline void ComputeTask::set_data_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_data_size(value);
  // @@protoc_insertion_point(field_set:hddt.ComputeTask.data_size)
}

// string dtype = 4;
inline void ComputeTask::clear_dtype() {
  dtype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ComputeTask::dtype() const {
  // @@protoc_insertion_point(field_get:hddt.ComputeTask.dtype)
  return _internal_dtype();
}
inline void ComputeTask::set_dtype(const std::string& value) {
  _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:hddt.ComputeTask.dtype)
}
inline std::string* ComputeTask::mutable_dtype() {
  // @@protoc_insertion_point(field_mutable:hddt.ComputeTask.dtype)
  return _internal_mutable_dtype();
}
inline const std::string& ComputeTask::_internal_dtype() const {
  return dtype_.Get();
}
inline void ComputeTask::_internal_set_dtype(const std::string& value) {
  
  dtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ComputeTask::set_dtype(std::string&& value) {
  
  dtype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hddt.ComputeTask.dtype)
}
inline void ComputeTask::set_dtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hddt.ComputeTask.dtype)
}
inline void ComputeTask::set_dtype(const char* value,
    size_t size) {
  
  dtype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hddt.ComputeTask.dtype)
}
inline std::string* ComputeTask::_internal_mutable_dtype() {
  
  return dtype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ComputeTask::release_dtype() {
  // @@protoc_insertion_point(field_release:hddt.ComputeTask.dtype)
  return dtype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ComputeTask::set_allocated_dtype(std::string* dtype) {
  if (dtype != nullptr) {
    
  } else {
    
  }
  dtype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dtype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hddt.ComputeTask.dtype)
}
inline std::string* ComputeTask::unsafe_arena_release_dtype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hddt.ComputeTask.dtype)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dtype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ComputeTask::unsafe_arena_set_allocated_dtype(
    std::string* dtype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dtype != nullptr) {
    
  } else {
    
  }
  dtype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dtype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hddt.ComputeTask.dtype)
}

// -------------------------------------------------------------------

// SynchronizationTask

// repeated int32 wait_ranks = 1;
inline int SynchronizationTask::_internal_wait_ranks_size() const {
  return wait_ranks_.size();
}
inline int SynchronizationTask::wait_ranks_size() const {
  return _internal_wait_ranks_size();
}
inline void SynchronizationTask::clear_wait_ranks() {
  wait_ranks_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SynchronizationTask::_internal_wait_ranks(int index) const {
  return wait_ranks_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SynchronizationTask::wait_ranks(int index) const {
  // @@protoc_insertion_point(field_get:hddt.SynchronizationTask.wait_ranks)
  return _internal_wait_ranks(index);
}
inline void SynchronizationTask::set_wait_ranks(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  wait_ranks_.Set(index, value);
  // @@protoc_insertion_point(field_set:hddt.SynchronizationTask.wait_ranks)
}
inline void SynchronizationTask::_internal_add_wait_ranks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  wait_ranks_.Add(value);
}
inline void SynchronizationTask::add_wait_ranks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_wait_ranks(value);
  // @@protoc_insertion_point(field_add:hddt.SynchronizationTask.wait_ranks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SynchronizationTask::_internal_wait_ranks() const {
  return wait_ranks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SynchronizationTask::wait_ranks() const {
  // @@protoc_insertion_point(field_list:hddt.SynchronizationTask.wait_ranks)
  return _internal_wait_ranks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SynchronizationTask::_internal_mutable_wait_ranks() {
  return &wait_ranks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SynchronizationTask::mutable_wait_ranks() {
  // @@protoc_insertion_point(field_mutable_list:hddt.SynchronizationTask.wait_ranks)
  return _internal_mutable_wait_ranks();
}

// int64 sequence_number = 2;
inline void SynchronizationTask::clear_sequence_number() {
  sequence_number_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SynchronizationTask::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SynchronizationTask::sequence_number() const {
  // @@protoc_insertion_point(field_get:hddt.SynchronizationTask.sequence_number)
  return _internal_sequence_number();
}
inline void SynchronizationTask::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sequence_number_ = value;
}
inline void SynchronizationTask::set_sequence_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:hddt.SynchronizationTask.sequence_number)
}

// -------------------------------------------------------------------

// Task

// .hddt.CommunicationTask comm_task = 1;
inline bool Task::_internal_has_comm_task() const {
  return task_type_case() == kCommTask;
}
inline bool Task::has_comm_task() const {
  return _internal_has_comm_task();
}
inline void Task::set_has_comm_task() {
  _oneof_case_[0] = kCommTask;
}
inline void Task::clear_comm_task() {
  if (_internal_has_comm_task()) {
    if (GetArena() == nullptr) {
      delete task_type_.comm_task_;
    }
    clear_has_task_type();
  }
}
inline ::hddt::CommunicationTask* Task::release_comm_task() {
  // @@protoc_insertion_point(field_release:hddt.Task.comm_task)
  if (_internal_has_comm_task()) {
    clear_has_task_type();
      ::hddt::CommunicationTask* temp = task_type_.comm_task_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    task_type_.comm_task_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hddt::CommunicationTask& Task::_internal_comm_task() const {
  return _internal_has_comm_task()
      ? *task_type_.comm_task_
      : *reinterpret_cast< ::hddt::CommunicationTask*>(&::hddt::_CommunicationTask_default_instance_);
}
inline const ::hddt::CommunicationTask& Task::comm_task() const {
  // @@protoc_insertion_point(field_get:hddt.Task.comm_task)
  return _internal_comm_task();
}
inline ::hddt::CommunicationTask* Task::unsafe_arena_release_comm_task() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hddt.Task.comm_task)
  if (_internal_has_comm_task()) {
    clear_has_task_type();
    ::hddt::CommunicationTask* temp = task_type_.comm_task_;
    task_type_.comm_task_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Task::unsafe_arena_set_allocated_comm_task(::hddt::CommunicationTask* comm_task) {
  clear_task_type();
  if (comm_task) {
    set_has_comm_task();
    task_type_.comm_task_ = comm_task;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hddt.Task.comm_task)
}
inline ::hddt::CommunicationTask* Task::_internal_mutable_comm_task() {
  if (!_internal_has_comm_task()) {
    clear_task_type();
    set_has_comm_task();
    task_type_.comm_task_ = CreateMaybeMessage< ::hddt::CommunicationTask >(GetArena());
  }
  return task_type_.comm_task_;
}
inline ::hddt::CommunicationTask* Task::mutable_comm_task() {
  // @@protoc_insertion_point(field_mutable:hddt.Task.comm_task)
  return _internal_mutable_comm_task();
}

// .hddt.ComputeTask compute_task = 2;
inline bool Task::_internal_has_compute_task() const {
  return task_type_case() == kComputeTask;
}
inline bool Task::has_compute_task() const {
  return _internal_has_compute_task();
}
inline void Task::set_has_compute_task() {
  _oneof_case_[0] = kComputeTask;
}
inline void Task::clear_compute_task() {
  if (_internal_has_compute_task()) {
    if (GetArena() == nullptr) {
      delete task_type_.compute_task_;
    }
    clear_has_task_type();
  }
}
inline ::hddt::ComputeTask* Task::release_compute_task() {
  // @@protoc_insertion_point(field_release:hddt.Task.compute_task)
  if (_internal_has_compute_task()) {
    clear_has_task_type();
      ::hddt::ComputeTask* temp = task_type_.compute_task_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    task_type_.compute_task_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hddt::ComputeTask& Task::_internal_compute_task() const {
  return _internal_has_compute_task()
      ? *task_type_.compute_task_
      : *reinterpret_cast< ::hddt::ComputeTask*>(&::hddt::_ComputeTask_default_instance_);
}
inline const ::hddt::ComputeTask& Task::compute_task() const {
  // @@protoc_insertion_point(field_get:hddt.Task.compute_task)
  return _internal_compute_task();
}
inline ::hddt::ComputeTask* Task::unsafe_arena_release_compute_task() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hddt.Task.compute_task)
  if (_internal_has_compute_task()) {
    clear_has_task_type();
    ::hddt::ComputeTask* temp = task_type_.compute_task_;
    task_type_.compute_task_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Task::unsafe_arena_set_allocated_compute_task(::hddt::ComputeTask* compute_task) {
  clear_task_type();
  if (compute_task) {
    set_has_compute_task();
    task_type_.compute_task_ = compute_task;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hddt.Task.compute_task)
}
inline ::hddt::ComputeTask* Task::_internal_mutable_compute_task() {
  if (!_internal_has_compute_task()) {
    clear_task_type();
    set_has_compute_task();
    task_type_.compute_task_ = CreateMaybeMessage< ::hddt::ComputeTask >(GetArena());
  }
  return task_type_.compute_task_;
}
inline ::hddt::ComputeTask* Task::mutable_compute_task() {
  // @@protoc_insertion_point(field_mutable:hddt.Task.compute_task)
  return _internal_mutable_compute_task();
}

// .hddt.SynchronizationTask sync_task = 3;
inline bool Task::_internal_has_sync_task() const {
  return task_type_case() == kSyncTask;
}
inline bool Task::has_sync_task() const {
  return _internal_has_sync_task();
}
inline void Task::set_has_sync_task() {
  _oneof_case_[0] = kSyncTask;
}
inline void Task::clear_sync_task() {
  if (_internal_has_sync_task()) {
    if (GetArena() == nullptr) {
      delete task_type_.sync_task_;
    }
    clear_has_task_type();
  }
}
inline ::hddt::SynchronizationTask* Task::release_sync_task() {
  // @@protoc_insertion_point(field_release:hddt.Task.sync_task)
  if (_internal_has_sync_task()) {
    clear_has_task_type();
      ::hddt::SynchronizationTask* temp = task_type_.sync_task_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    task_type_.sync_task_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hddt::SynchronizationTask& Task::_internal_sync_task() const {
  return _internal_has_sync_task()
      ? *task_type_.sync_task_
      : *reinterpret_cast< ::hddt::SynchronizationTask*>(&::hddt::_SynchronizationTask_default_instance_);
}
inline const ::hddt::SynchronizationTask& Task::sync_task() const {
  // @@protoc_insertion_point(field_get:hddt.Task.sync_task)
  return _internal_sync_task();
}
inline ::hddt::SynchronizationTask* Task::unsafe_arena_release_sync_task() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hddt.Task.sync_task)
  if (_internal_has_sync_task()) {
    clear_has_task_type();
    ::hddt::SynchronizationTask* temp = task_type_.sync_task_;
    task_type_.sync_task_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Task::unsafe_arena_set_allocated_sync_task(::hddt::SynchronizationTask* sync_task) {
  clear_task_type();
  if (sync_task) {
    set_has_sync_task();
    task_type_.sync_task_ = sync_task;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hddt.Task.sync_task)
}
inline ::hddt::SynchronizationTask* Task::_internal_mutable_sync_task() {
  if (!_internal_has_sync_task()) {
    clear_task_type();
    set_has_sync_task();
    task_type_.sync_task_ = CreateMaybeMessage< ::hddt::SynchronizationTask >(GetArena());
  }
  return task_type_.sync_task_;
}
inline ::hddt::SynchronizationTask* Task::mutable_sync_task() {
  // @@protoc_insertion_point(field_mutable:hddt.Task.sync_task)
  return _internal_mutable_sync_task();
}

// int64 estimated_duration = 4;
inline void Task::clear_estimated_duration() {
  estimated_duration_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Task::_internal_estimated_duration() const {
  return estimated_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Task::estimated_duration() const {
  // @@protoc_insertion_point(field_get:hddt.Task.estimated_duration)
  return _internal_estimated_duration();
}
inline void Task::_internal_set_estimated_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  estimated_duration_ = value;
}
inline void Task::set_estimated_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_estimated_duration(value);
  // @@protoc_insertion_point(field_set:hddt.Task.estimated_duration)
}

inline bool Task::has_task_type() const {
  return task_type_case() != TASK_TYPE_NOT_SET;
}
inline void Task::clear_has_task_type() {
  _oneof_case_[0] = TASK_TYPE_NOT_SET;
}
inline Task::TaskTypeCase Task::task_type_case() const {
  return Task::TaskTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TaskChain

// repeated .hddt.Task tasks = 1;
inline int TaskChain::_internal_tasks_size() const {
  return tasks_.size();
}
inline int TaskChain::tasks_size() const {
  return _internal_tasks_size();
}
inline void TaskChain::clear_tasks() {
  tasks_.Clear();
}
inline ::hddt::Task* TaskChain::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:hddt.TaskChain.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hddt::Task >*
TaskChain::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:hddt.TaskChain.tasks)
  return &tasks_;
}
inline const ::hddt::Task& TaskChain::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::hddt::Task& TaskChain::tasks(int index) const {
  // @@protoc_insertion_point(field_get:hddt.TaskChain.tasks)
  return _internal_tasks(index);
}
inline ::hddt::Task* TaskChain::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::hddt::Task* TaskChain::add_tasks() {
  // @@protoc_insertion_point(field_add:hddt.TaskChain.tasks)
  return _internal_add_tasks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hddt::Task >&
TaskChain::tasks() const {
  // @@protoc_insertion_point(field_list:hddt.TaskChain.tasks)
  return tasks_;
}

// int32 chain_id = 2;
inline void TaskChain::clear_chain_id() {
  chain_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskChain::_internal_chain_id() const {
  return chain_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskChain::chain_id() const {
  // @@protoc_insertion_point(field_get:hddt.TaskChain.chain_id)
  return _internal_chain_id();
}
inline void TaskChain::_internal_set_chain_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chain_id_ = value;
}
inline void TaskChain::set_chain_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chain_id(value);
  // @@protoc_insertion_point(field_set:hddt.TaskChain.chain_id)
}

// int64 priority = 3;
inline void TaskChain::clear_priority() {
  priority_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TaskChain::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TaskChain::priority() const {
  // @@protoc_insertion_point(field_get:hddt.TaskChain.priority)
  return _internal_priority();
}
inline void TaskChain::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  priority_ = value;
}
inline void TaskChain::set_priority(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:hddt.TaskChain.priority)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ComputationGraph_RankAssignment

// int32 rank = 1;
inline void ComputationGraph_RankAssignment::clear_rank() {
  rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComputationGraph_RankAssignment::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComputationGraph_RankAssignment::rank() const {
  // @@protoc_insertion_point(field_get:hddt.ComputationGraph.RankAssignment.rank)
  return _internal_rank();
}
inline void ComputationGraph_RankAssignment::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank_ = value;
}
inline void ComputationGraph_RankAssignment::set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:hddt.ComputationGraph.RankAssignment.rank)
}

// repeated .hddt.TaskChain chains = 2;
inline int ComputationGraph_RankAssignment::_internal_chains_size() const {
  return chains_.size();
}
inline int ComputationGraph_RankAssignment::chains_size() const {
  return _internal_chains_size();
}
inline void ComputationGraph_RankAssignment::clear_chains() {
  chains_.Clear();
}
inline ::hddt::TaskChain* ComputationGraph_RankAssignment::mutable_chains(int index) {
  // @@protoc_insertion_point(field_mutable:hddt.ComputationGraph.RankAssignment.chains)
  return chains_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hddt::TaskChain >*
ComputationGraph_RankAssignment::mutable_chains() {
  // @@protoc_insertion_point(field_mutable_list:hddt.ComputationGraph.RankAssignment.chains)
  return &chains_;
}
inline const ::hddt::TaskChain& ComputationGraph_RankAssignment::_internal_chains(int index) const {
  return chains_.Get(index);
}
inline const ::hddt::TaskChain& ComputationGraph_RankAssignment::chains(int index) const {
  // @@protoc_insertion_point(field_get:hddt.ComputationGraph.RankAssignment.chains)
  return _internal_chains(index);
}
inline ::hddt::TaskChain* ComputationGraph_RankAssignment::_internal_add_chains() {
  return chains_.Add();
}
inline ::hddt::TaskChain* ComputationGraph_RankAssignment::add_chains() {
  // @@protoc_insertion_point(field_add:hddt.ComputationGraph.RankAssignment.chains)
  return _internal_add_chains();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hddt::TaskChain >&
ComputationGraph_RankAssignment::chains() const {
  // @@protoc_insertion_point(field_list:hddt.ComputationGraph.RankAssignment.chains)
  return chains_;
}

// map<int32, int32> dependency_map = 3;
inline int ComputationGraph_RankAssignment::_internal_dependency_map_size() const {
  return dependency_map_.size();
}
inline int ComputationGraph_RankAssignment::dependency_map_size() const {
  return _internal_dependency_map_size();
}
inline void ComputationGraph_RankAssignment::clear_dependency_map() {
  dependency_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
ComputationGraph_RankAssignment::_internal_dependency_map() const {
  return dependency_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
ComputationGraph_RankAssignment::dependency_map() const {
  // @@protoc_insertion_point(field_map:hddt.ComputationGraph.RankAssignment.dependency_map)
  return _internal_dependency_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
ComputationGraph_RankAssignment::_internal_mutable_dependency_map() {
  return dependency_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
ComputationGraph_RankAssignment::mutable_dependency_map() {
  // @@protoc_insertion_point(field_mutable_map:hddt.ComputationGraph.RankAssignment.dependency_map)
  return _internal_mutable_dependency_map();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ComputationGraph

// repeated .hddt.ComputationGraph.RankAssignment assignments = 1;
inline int ComputationGraph::_internal_assignments_size() const {
  return assignments_.size();
}
inline int ComputationGraph::assignments_size() const {
  return _internal_assignments_size();
}
inline void ComputationGraph::clear_assignments() {
  assignments_.Clear();
}
inline ::hddt::ComputationGraph_RankAssignment* ComputationGraph::mutable_assignments(int index) {
  // @@protoc_insertion_point(field_mutable:hddt.ComputationGraph.assignments)
  return assignments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hddt::ComputationGraph_RankAssignment >*
ComputationGraph::mutable_assignments() {
  // @@protoc_insertion_point(field_mutable_list:hddt.ComputationGraph.assignments)
  return &assignments_;
}
inline const ::hddt::ComputationGraph_RankAssignment& ComputationGraph::_internal_assignments(int index) const {
  return assignments_.Get(index);
}
inline const ::hddt::ComputationGraph_RankAssignment& ComputationGraph::assignments(int index) const {
  // @@protoc_insertion_point(field_get:hddt.ComputationGraph.assignments)
  return _internal_assignments(index);
}
inline ::hddt::ComputationGraph_RankAssignment* ComputationGraph::_internal_add_assignments() {
  return assignments_.Add();
}
inline ::hddt::ComputationGraph_RankAssignment* ComputationGraph::add_assignments() {
  // @@protoc_insertion_point(field_add:hddt.ComputationGraph.assignments)
  return _internal_add_assignments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hddt::ComputationGraph_RankAssignment >&
ComputationGraph::assignments() const {
  // @@protoc_insertion_point(field_list:hddt.ComputationGraph.assignments)
  return assignments_;
}

// int64 graph_version = 2;
inline void ComputationGraph::clear_graph_version() {
  graph_version_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ComputationGraph::_internal_graph_version() const {
  return graph_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ComputationGraph::graph_version() const {
  // @@protoc_insertion_point(field_get:hddt.ComputationGraph.graph_version)
  return _internal_graph_version();
}
inline void ComputationGraph::_internal_set_graph_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  graph_version_ = value;
}
inline void ComputationGraph::set_graph_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_graph_version(value);
  // @@protoc_insertion_point(field_set:hddt.ComputationGraph.graph_version)
}

// map<int32, string> rank_host_mapping = 3;
inline int ComputationGraph::_internal_rank_host_mapping_size() const {
  return rank_host_mapping_.size();
}
inline int ComputationGraph::rank_host_mapping_size() const {
  return _internal_rank_host_mapping_size();
}
inline void ComputationGraph::clear_rank_host_mapping() {
  rank_host_mapping_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
ComputationGraph::_internal_rank_host_mapping() const {
  return rank_host_mapping_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
ComputationGraph::rank_host_mapping() const {
  // @@protoc_insertion_point(field_map:hddt.ComputationGraph.rank_host_mapping)
  return _internal_rank_host_mapping();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
ComputationGraph::_internal_mutable_rank_host_mapping() {
  return rank_host_mapping_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
ComputationGraph::mutable_rank_host_mapping() {
  // @@protoc_insertion_point(field_mutable_map:hddt.ComputationGraph.rank_host_mapping)
  return _internal_mutable_rank_host_mapping();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hddt

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::hddt::ComputeTask_OperatorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hddt::ComputeTask_OperatorType>() {
  return ::hddt::ComputeTask_OperatorType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hddt_2eproto
